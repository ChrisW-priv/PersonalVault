<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nexus Blog</title>
    <link>http://localhost/</link>
    <description>Recent content on Nexus Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost/3-terminal-device-transformations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/3-terminal-device-transformations/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;electronic%20circuit&#34;&gt;electronic circuit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;3-terminal-device-transformations&#34;&gt;3 terminal device transformations&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221030191710.png&#34; alt=&#34;Pasted image 20221030191710&#34;&gt;&#xA;Example:&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221030191734.png&#34; alt=&#34;Pasted image 20221030191734&#34;&gt;&#xA;Becomes:&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221030191748.png&#34; alt=&#34;Pasted image 20221030191748&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/a-priori-chance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/a-priori-chance/</guid>
      <description>&lt;h1 id=&#34;a-priori-chance&#34;&gt;A priori chance&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;The a priori chance factor is a ratio of probability of two hypothesis. it compares how likely is the hypothesis one compared to hypothesis two. It can be seen as part of &lt;a href=&#34;Proportional%20form%20of%20Bayes%20Rule.md&#34;&gt;Proportional form of Bayes Rule&lt;/a&gt; in &lt;a href=&#34;Comparing%20two%20hypothesis%20given%20data.md&#34;&gt;Comparing two hypothesis given data&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;$$O(H_1)=\frac{P(H_1)}{P(H_2)}$$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/absorptive-property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/absorptive-property/</guid>
      <description>&lt;p&gt;property 1:&#xA;$$x\cdot(y+x) = x$$&#xA;property 2:&#xA;$$x+(y\cdot x) = x$$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/adjacency-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/adjacency-list/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Graph%20representation.md&#34;&gt;Graph representation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;An adjacency list is a way to represent a graph as a map from nodes to lists of edges.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Pros&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Cons&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Space efficient for representing sparse graphs&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Less space efficient for denser graphs.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Iterating over all edges is efficient&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Edge weight lookup is $O(E)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Slightly more complex graph representation&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/adjacency-matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/adjacency-matrix/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Graph%20representation.md&#34;&gt;Graph representation&lt;/a&gt;&#xA;&lt;a href=&#34;Matrix.md&#34;&gt;Matrix&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;A adjacency matrix which we call m is a very simple way to represent a graph. The idea is that the cell $m[i][j]$ represents the edge weight of going from node i to j.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Pros&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Cons&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Space efficient for representing dense graphs&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Requires $O(V^2)$ space&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Edge weight lookup is $O(1)$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Iterating over all edges takes $O(V^2$) time&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Simplest graph representation&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/and-gate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/and-gate/</guid>
      <description>&lt;h1 id=&#34;and-logic-gate--land-&#34;&gt;AND Logic gate ( $\land$ )&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Logic%20Gates.md&#34;&gt;Logic Gates&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;truth-table&#34;&gt;Truth Table&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Truth%20Tables.md&#34;&gt;Truth Tables&lt;/a&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Q&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;math-representation&#34;&gt;Math Representation&lt;/h3&gt;&#xA;&lt;p&gt;r = pq&lt;/p&gt;&#xA;&lt;h3 id=&#34;symbol-representation&#34;&gt;Symbol Representation&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/AND_GATE.png&#34; alt=&#34;400x200&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;properies&#34;&gt;Properies&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Associative%20binary%20property.md&#34;&gt;Associative binary property&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Communicative%20binary%20property.md&#34;&gt;Communicative binary property&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Distributive%20binary%20property.md&#34;&gt;Distributive binary property&lt;/a&gt; with &lt;a href=&#34;OR%20gate.md&#34;&gt;OR gate&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Absorptive%20property.md&#34;&gt;Absorptive property&lt;/a&gt; with &lt;a href=&#34;OR%20gate.md&#34;&gt;OR gate&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/arguments-for-not-commenting-the-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/arguments-for-not-commenting-the-code/</guid>
      <description>&lt;p&gt;Part of &lt;a href=&#34;Code%20quality&#34;&gt;Code quality&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If code needs a comment it is a sign code should be refactored instead.&lt;/li&gt;&#xA;&lt;li&gt;Comments lie, code does not.&lt;/li&gt;&#xA;&lt;li&gt;When working with code with comments you need to update both code and comments during refactor. This is a big reason for comments that are out of date and confuse the future reader.&lt;/li&gt;&#xA;&lt;li&gt;To verify that code works you have compiler, linting and tests. There is no such tool for comments.&lt;/li&gt;&#xA;&lt;li&gt;Types are much better at enforcing proper state. See &lt;a href=&#34;Naming%20conventions%20in%20code.md&#34;&gt;Naming conventions in code&lt;/a&gt; for examples.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This is not to be mistaken with code documentation. Documentation is used to guide the user through how to use the code written. What is the contex of it. What are the expectations.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/articulation-points/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/articulation-points/</guid>
      <description>&lt;h1 id=&#34;articulation-points&#34;&gt;Articulation points&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt; theory a Articulation points are nodes which removal cause the increase in conected components (meaning: creates two disconnected graphs)&lt;/p&gt;&#xA;&lt;p&gt;Simmilar to &lt;a href=&#34;Bridges.md&#34;&gt;Bridges&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/assistant-task-execution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/assistant-task-execution/</guid>
      <description>&lt;p&gt;[[AI assistant]]&lt;/p&gt;&#xA;&lt;h1 id=&#34;assistant-task-execution&#34;&gt;Assistant task execution&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Language model by itself cannot perform any tasks. It, however, can determine&#xA;what tool can be used to perform the task. Here, tool is just a programming&#xA;function implemented in some programming language. Thus, if the LM provides us&#xA;with an output instructing which function to use and how, then we can invoke the&#xA;function specified with provided arguments.&lt;/p&gt;&#xA;&lt;p&gt;What is really necessary is the ability for the LM to generate a structured output,&#xA;that is known by the caller beforehand and can be easily interpreted.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/associative-binary-property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/associative-binary-property/</guid>
      <description>&lt;p&gt;Let $X$ be non-empty set.&#xA;Let $\oplus$ be a binary operation defined $\forall x, y \in X.$&#xA;We say that $\oplus$ is &lt;strong&gt;Associative&lt;/strong&gt; if:&#xA;$(x \oplus y) \oplus z \equiv x \oplus (y \oplus z)$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/asymmetric-encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/asymmetric-encryption/</guid>
      <description>&lt;h1 id=&#34;asymmetric-encryption&#34;&gt;Asymmetric encryption&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a kind of &lt;a href=&#34;Encryption.md&#34;&gt;Encryption&lt;/a&gt; where it&amp;rsquo;s practically impossible to know the &lt;a href=&#34;Decryption%20Key&#34;&gt;Decryption Key&lt;/a&gt; based on the &lt;a href=&#34;Encryption%20Key&#34;&gt;Encryption Key&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Also known as system with public key.&#xA;This system can remove need for trust and to keep secrets safe somehow (here to be able to share the Key). Real problem is to maintain accurate map of key-owner pairs in the system. Also we need to know to whom we are writing because we need his public key.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/attack-on-system-with-a-public-key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/attack-on-system-with-a-public-key/</guid>
      <description>&lt;h1 id=&#34;attack-on-system-with-a-public-key&#34;&gt;Attack on system with a public key&lt;/h1&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;In a &lt;a href=&#34;Asymmetric%20encryption.md&#34;&gt;Asymmetric encryption&lt;/a&gt; attackers may want to deduce the &lt;a href=&#34;Decryption%20Key&#34;&gt;Decryption Key&lt;/a&gt; based on the public &lt;a href=&#34;Encryption%20Key&#34;&gt;Encryption Key&lt;/a&gt;. However to do a brute force search is often unfeasible as the keys are often too big to do a comprehensive search. Instead what we do is we attack the underlying principles of how the key was produced in the first place.&#xA;For example in RSA algorithm we try to do prime number decomposition and however can do it fast enough can break many of the RSA standards.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/basis-of-vector-space/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/basis-of-vector-space/</guid>
      <description>&lt;h1 id=&#34;basis-of-vector-space&#34;&gt;Basis of vector space&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;A set of &lt;a href=&#34;Linear%20dependence.md&#34;&gt;linearly independent&lt;/a&gt; vectors that &lt;a href=&#34;Span%20of%20vector%20space.md&#34;&gt;span&lt;/a&gt; full space.&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/bayes-factor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/bayes-factor/</guid>
      <description>&lt;h1 id=&#34;bayes-factor&#34;&gt;Bayes Factor&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;The Bayes factor is a ratio of two competing statistical models. It does so by compering how much more likely you are to see an event given two different hypothesis. It can be seen as part of &lt;a href=&#34;Proportional%20form%20of%20Bayes%20Rule.md&#34;&gt;Proportional form of Bayes Rule&lt;/a&gt; in &lt;a href=&#34;Comparing%20two%20hypothesis%20given%20data.md&#34;&gt;Comparing two hypothesis given data&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;$$K = \frac{P(D|H_1)}{P(D|H_2)}$$&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$K$ is a Bayes factor&lt;/li&gt;&#xA;&lt;li&gt;$P(D|H_1)$ is a probability of seeing data given hypothesis 1&lt;/li&gt;&#xA;&lt;li&gt;$P(D|H_2)$ is a probability of seeing data given hypothesis 2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;The Bayes factor is a part of&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/bayes-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/bayes-rule/</guid>
      <description>&lt;h1 id=&#34;bayes-theorem&#34;&gt;Bayes theorem&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Bayes Rule describes the probability of an event, based on prior knowledge of conditions that might be related to the event.&#xA;With Bayesian probability interpretation, the theorem expresses how a degree of belief, expressed as a probability, should rationally change to account for the availability of related evidence. Bayesian inference is fundamental to Bayesian statistics, being considered &amp;ldquo;to the theory of probability what Pythagoras&amp;rsquo;s theorem is to geometry.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/bellman-ford-algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/bellman-ford-algorithm/</guid>
      <description>&lt;h1 id=&#34;bellman-ford-algorithm&#34;&gt;Bellman-Ford algorithm&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Bellman-Ford algorithm is a Single Source Shortest Path (&lt;a href=&#34;SSSP&#34;&gt;SSSP&lt;/a&gt;) algorithm for any &lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;. It has much worse efficiency compared to other algorithms like Dijkstra&amp;rsquo;s algorithm. However, it can present correct result even with graph with negative cycles.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Note]&#xA;This algorithm also can be used for detecting negative cycles and determine where they are.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;p&gt;#TODO&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/bernoulli-equations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/bernoulli-equations/</guid>
      <description>&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;For a function in a form&#xA;$$y + P(x)y&amp;rsquo; = Q(x)\cdot y^n$$&lt;/p&gt;&#xA;&lt;p&gt;Step 1: Find an integrating factor following this formula&#xA;$$I(x) = e^{\int (1-n)P(x)dx}$$&#xA;Step 2: Solve equation&#xA;$$y^{1-n} = \frac1{I(x)}\left[\int (1-n)Q(x)I(x) dx \right]$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;changing-any-function-into-standard-form&#34;&gt;Changing any function into standard form&lt;/h2&gt;&#xA;&lt;p&gt;For any function&#xA;$$F\cdot dx + G\cdot dy = 0$$&#xA;First divide everything by $dx$ to get&#xA;$$F + Gy&amp;rsquo; = 0$$&#xA;Then divide everything by $G$&#xA;$$y&amp;rsquo; + \frac{F}{G} = 0$$&#xA;And split $\frac{F}{G}$ to get&#xA;$$y + P(x)y&amp;rsquo; = Q(x)\cdot y^n$$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/beta-distribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/beta-distribution/</guid>
      <description>&lt;p&gt;#TODO&lt;/p&gt;&#xA;&lt;h1 id=&#34;beta-distribution&#34;&gt;Beta distribution&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;Probability.md&#34;&gt;Probability&lt;/a&gt; and &lt;a href=&#34;Statistics.md&#34;&gt;Statistics&lt;/a&gt;, the beta distribution function is a family of continuous probability distributions defined on the closed interval from 0 to 1.&#xA;It is defined by two parameters: alpha $\alpha$ and beta $\beta$, that control the shape of the function&lt;/p&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;Probability%20density%20function%20(PDF)&#34;&gt;Probability density function (PDF)&lt;/a&gt; of the beta distribution, for 0 ≤ x ≤ 1, and shape parameters α, β &amp;gt; 0, is a power function of the variable x and of its reflection (1 − x).&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/big-o-notation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/big-o-notation/</guid>
      <description>&lt;p&gt;Big O notation is a tool we use to describe how the runtime of the algorithm changes as the size of the input changes. In big O we always skip any constants and scalars only take biggest factor in the total runtime equation.&lt;/p&gt;&#xA;&lt;p&gt;eg.&#xA;$3n+1 \rightarrow O(n)$&#xA;$n^2 + n \rightarrow O(n^2)$&lt;/p&gt;&#xA;&lt;p&gt;Often used with &lt;a href=&#34;Omega%20notation.md&#34;&gt;Omega notation&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/bijective-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/bijective-function/</guid>
      <description>&lt;p&gt;Type of &lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Also known as one-to-one correspondence function.&lt;/p&gt;&#xA;&lt;p&gt;Bijective function is a combination of &lt;a href=&#34;Injective%20function.md&#34;&gt;Injective function&lt;/a&gt; and &lt;a href=&#34;Surjective%20function.md&#34;&gt;Surjective function&lt;/a&gt; (onto function).&lt;/p&gt;&#xA;&lt;p&gt;A function will be known as one-to-one correspondence function if every element of the domain set is connected with exactly one element of a co-domain set and vice versa.&lt;/p&gt;&#xA;&lt;p&gt;In the bijective function, from set A to set B, there is an inverse function from set B to set A. In the bijective function, every element of the set has a relation with itself.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/binary-search-tree-bst/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/binary-search-tree-bst/</guid>
      <description>&lt;h1 id=&#34;binary-search-tree-bst&#34;&gt;Binary Search Tree (BST)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;BST is a &lt;a href=&#34;Tree.md&#34;&gt;Tree&lt;/a&gt; that has special property of being ordered in folowing way:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Each node has at most two children called &amp;ldquo;left&amp;rdquo; and &amp;ldquo;right&amp;rdquo;.&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;left&amp;rdquo; child must be smaller that it&amp;rsquo;s parent and &amp;ldquo;right&amp;rdquo; must be bigger&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;traversing-tree&#34;&gt;Traversing tree&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;visit node first&lt;/li&gt;&#xA;&lt;li&gt;visit subtrees first&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Three different traversals:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Inorder (LNR) - Traverse left-first&lt;/li&gt;&#xA;&lt;li&gt;Preorder (NLR) - Traverse node-first&lt;/li&gt;&#xA;&lt;li&gt;Postorder (LRN) - Traverse subtrees-frist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;use-of-the-traversioning-orderings&#34;&gt;Use of the traversioning orderings&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Inorder (LNR)&#xA;Printing the elements in an order&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/binary-search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/binary-search/</guid>
      <description>&lt;h1 id=&#34;binary-search&#34;&gt;Binary Search&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Search done on a &lt;a href=&#34;Sorted%20Array&#34;&gt;Sorted Array&lt;/a&gt;. It searches for the element in $O(log(n))$ complexity. Very efficient because each comparison cuts down half of the options that we would normally need to compare with.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Note]&#xA;What we need is an index of an element in range or boolean info if element is in the range we look for.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudo&#34; data-lang=&#34;pseudo&#34;&gt;def binary_search(arr, x):&#xD;&#xA;    low = 0&#xD;&#xA;    high = len(arr) - 1&#xD;&#xA;    mid = 0&#xD;&#xA; &#xD;&#xA;    while low &amp;lt;= high:&#xD;&#xA;        mid = (high + low) // 2&#xD;&#xA; &#xD;&#xA;        # If x is greater, ignore left half&#xD;&#xA;        if arr[mid] &amp;lt; x:&#xD;&#xA;            low = mid + 1&#xD;&#xA; &#xD;&#xA;        # If x is smaller, ignore right half&#xD;&#xA;        elif arr[mid] &amp;gt; x:&#xD;&#xA;            high = mid - 1&#xD;&#xA; &#xD;&#xA;        # if we got here it means mid = x&#xD;&#xA;        else:&#xD;&#xA;            return mid&#xD;&#xA; &#xD;&#xA;    # If we reach here, then the element was not present&#xD;&#xA;    return -1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;c&#34;&gt;C++&lt;/h3&gt;&#xA;&lt;p&gt;In c++ we have a &lt;code&gt;std::binary_search&lt;/code&gt; but it returns only boolean if it was found or not. That can sometimes be useful but if we need an index of the value then we need to use &lt;a href=&#34;https://en.cppreference.com/w/cpp/algorithm/lower_bound&#34;&gt;std::lower_bound&lt;/a&gt; which returns iterator to first element that does not satisfy &lt;code&gt;element &amp;lt; value&lt;/code&gt; (so equal or greater).&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/binomial-distribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/binomial-distribution/</guid>
      <description>&lt;h1 id=&#34;binomial-distribution&#34;&gt;Binomial distribution&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Binomial distribution is used to calculate &lt;a href=&#34;Probability.md&#34;&gt;Probability&lt;/a&gt; of certain number of successes given certain number of tries and probability of them happening.&lt;/p&gt;&#xA;&lt;p&gt;Bi in binomial stands for certain outcome either happening or not. If situation does not have just 2 outcomes then we should use &lt;a href=&#34;Polynomial%20distribution&#34;&gt;Polynomial distribution&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;We have three parameters:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$n$ for number of tries&lt;/li&gt;&#xA;&lt;li&gt;$k$ for number of events happening&lt;/li&gt;&#xA;&lt;li&gt;$p$ for probability of event happening&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;We note binomial distribution function as $B(k;n,p)$&#xA;And formula for that function is equal&#xA;$$B(k;n,p) = {{n}\choose{k}} \times p^k \times p^{n-k}$$&#xA;Note that $k$ is separated from $n$ and $p$ by $;$ sign. That is because in general we will use Binomial Distribution simply as $B(n,p)$.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/bipartite-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/bipartite-graph/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;A Bipartite Graph is one whose vertices can be split into two independent groups $U,V$ such that every node connects between $U$ and $V$. In other words, graph is two-colour-able.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/bit-field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/bit-field/</guid>
      <description>&lt;h1 id=&#34;bit-field&#34;&gt;Bit Field&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;A bit field is a data structure that consists of one or more adjacent bits which have been allocated for specific purposes, so that any single bit or group of bits within the structure can be set or inspected.&lt;/p&gt;&#xA;&lt;p&gt;Commonly used to represent &lt;a href=&#34;boolean&#34;&gt;boolean&lt;/a&gt;. Very efficient for flags that define behaviour.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/bit-hacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/bit-hacks/</guid>
      <description>&lt;p&gt;A note of video by Creel &lt;img src=&#34;https://www.youtube.com/watch?v=ZRNO-ewsNcQ&#34; alt=&#34;this&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;setting-the-bit&#34;&gt;Setting the bit&lt;/h2&gt;&#xA;&lt;p&gt;having a mask, &lt;code&gt;or&lt;/code&gt; it with target.&#xA;here we want to set 6-th bit (to 1):&#xA;&lt;code&gt;x = x | (1&amp;lt;&amp;lt;6)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;clear-the-bit&#34;&gt;Clear the bit&lt;/h2&gt;&#xA;&lt;p&gt;having a mask, invert it and &lt;code&gt;and&lt;/code&gt; it with target.&#xA;here we want to clear the 6-th bit (set to 0).&#xA;&lt;code&gt;x = x &amp;amp; ~(1&amp;lt;&amp;lt;6)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;toggle-the-bit&#34;&gt;Toggle the bit&lt;/h2&gt;&#xA;&lt;p&gt;having a mask, &lt;code&gt;xor&lt;/code&gt; it with target.&#xA;here we want to toggle the 6-th bit.&#xA;&lt;code&gt;x = x ^ (1&amp;lt;&amp;lt;6)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/boolean-algebra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/boolean-algebra/</guid>
      <description>&lt;h1 id=&#34;boolean-algebra&#34;&gt;Boolean Algebra&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Set of rules defining behavior of &lt;a href=&#34;Logic%20Gates.md&#34;&gt;Logic Gates&lt;/a&gt; and &lt;a href=&#34;Logic%20circuits.md&#34;&gt;Logic circuits&lt;/a&gt;. Operates on &lt;a href=&#34;boolean&#34;&gt;boolean&lt;/a&gt; data.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;h3 id=&#34;variables&#34;&gt;Variables&lt;/h3&gt;&#xA;&lt;p&gt;For variable $x$ it&amp;rsquo;s value always belong to set ${{0,1}}$&lt;/p&gt;&#xA;&lt;h3 id=&#34;operators&#34;&gt;Operators&lt;/h3&gt;&#xA;&lt;h4 id=&#34;not&#34;&gt;Not&lt;/h4&gt;&#xA;&lt;p&gt;for variable x that we want to note as &amp;ldquo;not x&amp;rdquo; we write $\bar{x}$&#xA;&lt;a href=&#34;NOT%20gate.md&#34;&gt;NOT gate&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;and&#34;&gt;And&lt;/h4&gt;&#xA;&lt;p&gt;Sumbol in maths: $\cdot$&#xA;&lt;a href=&#34;AND%20gate.md&#34;&gt;AND gate&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;or&#34;&gt;Or&lt;/h4&gt;&#xA;&lt;p&gt;Symbol in maths: $+$&#xA;&lt;a href=&#34;OR%20gate.md&#34;&gt;OR gate&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/breadth-first-search-bfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/breadth-first-search-bfs/</guid>
      <description>&lt;p&gt;The BFS is another fundamental search algorithm used to explore nodes and edges of graph. It runs with a time complexity of $O(V+E)$ and is often used as a building block in other algorithms.&lt;/p&gt;&#xA;&lt;p&gt;The BFS algorithm is particularly useful for one thing: finding shortest path on unweighted graphs.&lt;/p&gt;&#xA;&lt;p&gt;To build a BFS it is easiest to build a &lt;a href=&#34;Queue.md&#34;&gt;Queue&lt;/a&gt; to track which node to visit next.&lt;/p&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudo&#34; data-lang=&#34;pseudo&#34;&gt;n = number of nodes in the graph&#xD;&#xA;graph = adjancy list representing graph&#xD;&#xA;visited = [false, ..., false] # size n&#xD;&#xA;&#xD;&#xA;# s = start node, e = end node, 0 =&amp;lt; s,e &amp;lt;n&#xD;&#xA;function bfs(s, e):&#xD;&#xA;&#x9;prev = solve(s)&#xD;&#xA;&#xD;&#xA;&#x9;return reconstructPath(s,e,prev)&#xD;&#xA;&#xD;&#xA;function solve(s):&#xD;&#xA;&#x9;q = queue data structure with enqueue and dequeqe&#xD;&#xA;&#x9;q.enqueue(s)&#xD;&#xA;&#x9;visited = [false, ..., false] # size n&#xD;&#xA;&#x9;visited[s] = true&#xD;&#xA;&#xD;&#xA;&#x9;prev = [null, ..., null] # size n&#xD;&#xA;&#xD;&#xA;&#x9;while not q.Empty():&#xD;&#xA;&#x9;&#x9;node = q.dequeue()&#xD;&#xA;&#x9;&#x9;neighbours = graph.get(node)&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;for next in neighbours:&#xD;&#xA;&#x9;&#x9;&#x9;if not visited[next]:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;q.enqueue(next)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visited[next] = true&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;prev[next] = node&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;return prev&#xD;&#xA;&#xD;&#xA;function reconstructPath(s,e,prev):&#xD;&#xA;&#x9;# Reconstruct path going backwards from e&#xD;&#xA;&#x9;path = []&#xD;&#xA;&#x9;at = e&#xD;&#xA;&#x9;while at != null:&#xD;&#xA;&#x9;&#x9;path.add(at)&#xD;&#xA;&#x9;&#x9;at = prev[at]&#xD;&#xA;&#xD;&#xA;&#x9;# reverse path to be path from s-&amp;gt;e not e-&amp;gt;s&#xD;&#xA;&#x9;path.reverse()&#xD;&#xA;&#xD;&#xA;&#x9;# If s and e are connected return path else empty array&#xD;&#xA;&#x9;if path[0] == s:&#xD;&#xA;&#x9;&#x9;return path&#xD;&#xA;&#x9;return []&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# Start BFS at node zero, and end at n-1&#xD;&#xA;start = 0, end = n-1&#xD;&#xA;bfs(start, end)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;connected-to&#34;&gt;Connected to&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/bridges-and-articulation-points-in-graphs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/bridges-and-articulation-points-in-graphs/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;&#xA;#TODO&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/bridges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/bridges/</guid>
      <description>&lt;h1 id=&#34;bridges&#34;&gt;Bridges&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt; theory a bridge is an edge which removal causes the increase in connected components (meaning: creates two disconnected graphs)&lt;/p&gt;&#xA;&lt;p&gt;Simmilar to &lt;a href=&#34;Articulation%20points.md&#34;&gt;Articulation points&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/building-knowledge-base-from-documents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/building-knowledge-base-from-documents/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;zettelkasten/RAG.md&#34;&gt;RAG&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;building-knowledge-base-from-documents&#34;&gt;Building knowledge base from Documents&lt;/h1&gt;&#xA;&lt;p&gt;Text Indexing for Language Extraction&#xA;Text indexing based on RAPTOR idea for RAG.&#xA;Great link to paper I should take examples from &lt;a href=&#34;https://arxiv.org/html/2401.18059v1&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;p&gt;We have some knowledge stored in documents. Those documents may have different&#xA;structure and file extensions. This includes markup file extensions like PDF,&#xA;HTML, Markdown or Microsoft Office associated files, but also pictures or video&#xA;which come in a wide variety of file formats.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/c&#43;&#43;-in-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/c&#43;&#43;-in-python/</guid>
      <description>&lt;p&gt;To use a C++ function in Python, you can use Cython to create a Python extension module. Cython is a language that makes writing C extensions for the Python language as easy as Python itself.&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s an example of how to do this:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;First, you&amp;rsquo;ll need to install Cython if you don&amp;rsquo;t already have it. You can do this by running the following command:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install cython&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;Next, you&amp;rsquo;ll need to create a file containing the C++ code for the function you want to use in Python. Let&amp;rsquo;s call this file &lt;code&gt;my_function.cpp&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Then, create a file called &lt;code&gt;setup.py&lt;/code&gt; containing the following code:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; distutils.core &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; setup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Cython.Build &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cythonize&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setup(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My Cython Extension&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ext_modules&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cythonize(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my_function.cpp&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This file specifies the necessary information for building your Cython extension.&#xA;4.  Now, you can build the extension by running the following command:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/calculating-probability-by-counting-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/calculating-probability-by-counting-events/</guid>
      <description>&lt;h1 id=&#34;calculating-probability-by-counting-events&#34;&gt;Calculating probability by counting events&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;One easy way of calculating &lt;a href=&#34;Probability.md&#34;&gt;Probability&lt;/a&gt; of events is to calculate number of all situations we care about and divide it by number of all situations that can happen.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;A set of events we care about is often noted as $X$&#xA;A set of all possible events is noted as greek Omega letter: $\Omega$&#xA;Probability of event in set $X$ happening will be calculated as:&#xA;$$P(X) = \frac{\text{Number of elements in X}}{\text{Number of elements in}\ \Omega} \in &amp;lt;0,1&amp;gt;$$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/capacitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/capacitor/</guid>
      <description>&lt;h1 id=&#34;capacitor&#34;&gt;Capacitor&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221027204225.png&#34; alt=&#34;Pasted image 20221027204225&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/chain-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/chain-rule/</guid>
      <description>&lt;h1 id=&#34;chain-rule&#34;&gt;Chain rule&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;In calculus, the chain rule is a formula that expresses the &lt;a href=&#34;Derivative.md&#34;&gt;Derivative&lt;/a&gt; of the &lt;a href=&#34;Composed%20function.md&#34;&gt;Composed function&lt;/a&gt; &lt;code&gt;h&lt;/code&gt; of two differentiable functions &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; in terms of the derivatives of &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;For function $h$ defined as $h = f(g(x))$.&#xA;$$h&amp;rsquo;(x) = f&amp;rsquo;(g(x)) \cdot g&amp;rsquo;(x)$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;There is a ton of good resources online that explain why this makes sense for now I leave it as #TODO  but see 3b1b video that explains it well.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/change-of-basis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/change-of-basis/</guid>
      <description>&lt;h1 id=&#34;change-of-basis&#34;&gt;Change of basis&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Method to translate one coordinate system to another&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;$$M = T^{-1}AT$$&#xA;Where $T$ is change of basis matrix and $A$ is original matrix&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;video by 3b1b: &lt;a href=&#34;https://www.youtube.com/watch?v=P2LTAUO1TdA&#34;&gt;link&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/checklist-for-strong-encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/checklist-for-strong-encryption/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Encryption.md&#34;&gt;Encryption&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;checklist-for-strong-encryption&#34;&gt;Checklist for strong Encryption&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; The &lt;a href=&#34;Ciphertext.md&#34;&gt;Ciphertext&lt;/a&gt; should not be intercepted.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Content of the &lt;a href=&#34;Ciphertext.md&#34;&gt;Ciphertext&lt;/a&gt; should not be deducible&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; The &lt;a href=&#34;Encryption%20System&#34;&gt;Encryption System&lt;/a&gt; should stay unknown to attackers&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; The &lt;a href=&#34;Decryption%20Key&#34;&gt;Decryption Key&lt;/a&gt; has to remain unknown to the attackers&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;h3 id=&#34;the-ciphertextciphertextmd-should-not-be-intercepted&#34;&gt;The &lt;a href=&#34;Ciphertext.md&#34;&gt;Ciphertext&lt;/a&gt; should not be intercepted.&lt;/h3&gt;&#xA;&lt;p&gt;This is often not satisfied, and even on a secure web where we trust each machine there should be some way to disable users from access above their privileges&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/chunking-methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/chunking-methods/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;zettelkasten/LLM.md&#34;&gt;LLM&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;chunking-methods&#34;&gt;Chunking methods&lt;/h1&gt;&#xA;&lt;h2 id=&#34;chunk-size&#34;&gt;Chunk Size&lt;/h2&gt;&#xA;&lt;p&gt;The size of the chunks can have a significant impact on the quality of the RAG&#xA;system. While large sized chunks provide better context, they also carry a lot&#xA;of noise. Smaller chunks, on the other hand, have precise information but they&#xA;might miss important information.&lt;/p&gt;&#xA;&lt;p&gt;Example:&#xA;Consider a legal document that’s 10,000 words long. If we chunk it into&#xA;1,000-word segments, each chunk might contain multiple legal clauses, making it&#xA;hard to retrieve specific information. Conversely, chunking it into 200-word&#xA;segments allows for more precise retrieval of individual clauses, but may lose&#xA;the context provided by surrounding clauses. Experimenting with chunk sizes can&#xA;help find the optimal balance for accurate retrieval.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/ciphertext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/ciphertext/</guid>
      <description>&lt;h1 id=&#34;ciphertext&#34;&gt;Ciphertext&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Encrypted version of &lt;a href=&#34;Plain%20text.md&#34;&gt;Plain text&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/circular-buffer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/circular-buffer/</guid>
      <description>&lt;h1 id=&#34;circular-buffer&#34;&gt;Circular buffer&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Method used to reduce memory move operation used for repetitive, cyclic patterns.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;p&gt;Simplest C code I can think of on the spot:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PTR_TYPE int*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CyclicBuffer&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;PTR_TYPE array;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; offset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; capacity;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// rest of the code&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;now I have no time so mark it as #TODO  but basically, when we need &amp;rsquo;next&amp;rsquo; element we:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;check if offset is equal or grater to capacity&lt;/li&gt;&#xA;&lt;li&gt;if it is, reset to 0, else continue to step 3&lt;/li&gt;&#xA;&lt;li&gt;save data from under &lt;code&gt;array[offset]&lt;/code&gt; to &lt;code&gt;result&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;increment offset&lt;/li&gt;&#xA;&lt;li&gt;return &lt;code&gt;result&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Note, we need a lot more of &amp;ldquo;utility functions&amp;rdquo; like the one to allocate space for array or re-allocate if we want to resize it or check if it reached the end.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/circular-doubly-linked-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/circular-doubly-linked-list/</guid>
      <description>&lt;h1 id=&#34;circular-doubly-linked-list&#34;&gt;Circular Doubly Linked List&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;An extension od &lt;a href=&#34;Doubly%20Linked%20List.md&#34;&gt;Doubly Linked List&lt;/a&gt; also called Doubly Linked Ring.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;graph LR&#xD;&#xA;    start --&amp;gt; A &#xD;&#xA;    A{{A}} --&amp;gt;|next| B{{B}} --&amp;gt;|next| C{{C}} --&amp;gt;|next| D{{D}}--&amp;gt;|next| A&#xD;&#xA;&#x9;D --&amp;gt;|prev| C --&amp;gt;|prev| B --&amp;gt;|prev| A--&amp;gt;|prev| D&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!note]&#xA;In general it&amp;rsquo;ll be easier to implement this using iterators + one extra node that will not be treated as Read-Write node. Instead it&amp;rsquo;ll be used to define begin() and end() iterators.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/circular-singly-linked-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/circular-singly-linked-list/</guid>
      <description>&lt;h1 id=&#34;circular-singly-linked-list&#34;&gt;Circular Singly Linked List&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;An extension of &lt;a href=&#34;Singly%20Linked%20List.md&#34;&gt;Singly Linked List&lt;/a&gt; that allows for insertions at the beginning as well as at the end without extra pointer for &amp;ldquo;end&amp;rdquo;. Also called Singly Linked Ring.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;graph LR&#xD;&#xA;    last--&amp;gt;B{{node Z}} --&amp;gt;|next| C{{node p}} --&amp;gt;|next| D{{node}} --&amp;gt;|next| E{{node}} --&amp;gt;|next| B&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;p&gt;#TODO  create this class and add it to github + add link here&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/closure-in-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/closure-in-code/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;zettelkasten/Closure%20Properties%20of%20Regular%20Languages.md&#34;&gt;Closure Properties of Regular Languages&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;closure-in-code&#34;&gt;Closure in code&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Record storing a function together with an environment. In practice, closure is an option to reference variables from outside the scope of function.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Closure is actually really closely related to &lt;a href=&#34;Object%20oriented%20programming&#34;&gt;Object oriented programming&lt;/a&gt;, and in languages that do not support oop, is used as a supplement for it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s create a function that implements memoisation to some unary function:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;memoize&lt;/span&gt;(unaryFn):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;memo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;memoisedFn&lt;/span&gt;(x):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; memo:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memo[x]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unaryFn(x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;memo[x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memoisedFn&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code starts by initialising the &lt;code&gt;memo&lt;/code&gt; dictionary and returning function handle to a function that wraps &lt;code&gt;unaryFn&lt;/code&gt; execution with some checks to &lt;code&gt;memo&lt;/code&gt; dictionary from outside scope.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/closure-properties-of-regular-languages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/closure-properties-of-regular-languages/</guid>
      <description>&lt;p&gt;[[ELAC]]&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-closure&#34;&gt;What is closure&lt;/h2&gt;&#xA;&lt;p&gt;Closure property is a statement that a certain operation on languages when applied to languages in a class (e.g. RE languages), produces a result that is also in that class&lt;/p&gt;&#xA;&lt;p&gt;For regular languages we can use any representation to prove a closure property&lt;/p&gt;&#xA;&lt;h2 id=&#34;union&#34;&gt;Union&lt;/h2&gt;&#xA;&lt;p&gt;If $L$ and $M$ are regular languages, so is $L \cup M$&#xA;$R|S$ is a regex whose language is $L \cup M$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/code-nesting-resolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/code-nesting-resolution/</guid>
      <description>&lt;p&gt;Part of &lt;a href=&#34;Code%20quality&#34;&gt;Code quality&lt;/a&gt;&#xA;Code nesting is adding more blocks or depth to your code. for example following code has 4 nested blocks:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bottom, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; top){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (top &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; bottom){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bottom; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; top; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;n){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;methods-to-de-nest&#34;&gt;Methods to De-nest&lt;/h2&gt;&#xA;&lt;h3 id=&#34;extraction&#34;&gt;Extraction&lt;/h3&gt;&#xA;&lt;p&gt;Taking out a portion of a function into it&amp;rsquo;s own separate function.&lt;/p&gt;&#xA;&lt;h3 id=&#34;inversion&#34;&gt;Inversion&lt;/h3&gt;&#xA;&lt;p&gt;Switching the order of if return logic in favour of return-guarding statements.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/combining-probability-with-and/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/combining-probability-with-and/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Probability.md&#34;&gt;Probability&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;combining-probability-with-and&#34;&gt;Combining probability with AND&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;We use AND logic operator when we want to know what is the probability of two (or more) events happening.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;If we have two events $A,B$ then probability of BOTH of them happening will be noted as $P(A,B)$.&lt;/p&gt;&#xA;&lt;p&gt;We can calculate it by multiplying the probabilities of both $P(A,B) = P(A) \times P(B)$&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Rather simple, however best description would likely be to draw a tree of possible outcomes for each event and just trace how many outcomes are at the end that satisfied both $A$ and $B$.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/combining-probability-with-or/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/combining-probability-with-or/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Probability.md&#34;&gt;Probability&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;combining-probability-with-or&#34;&gt;Combining probability with OR&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;We use OR logic operator when we want to know what is the probability of either of two (or more) events happening.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;If we have two events $A,B$ then probability of EITHER of them happening will be noted as $\text{P(A) OR P(B)}$.&lt;/p&gt;&#xA;&lt;p&gt;We can calculate it by multiplying the probabilities of both $\text{P(A) OR P(B)} = P(A) + P(B) - P(A,B)$&#xA;Where $P(A,B)$ is a result of &lt;a href=&#34;Combining%20probability%20with%20AND.md&#34;&gt;Combining probability with AND&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/command-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/command-pattern/</guid>
      <description>&lt;h1 id=&#34;command-pattern&#34;&gt;Command pattern&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Behavioral &lt;a href=&#34;Design%20pattern&#34;&gt;Design pattern&lt;/a&gt; used to encapsulate all information needed to perform an action or trigger an event at a later time.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Note based on &amp;ldquo;Programowanie gier Wzorce&amp;rdquo; by Robert Nystrom&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Note]&#xA;Following note assumes we write our code in c++. Therefore we choose the&#xA;object oriented approach to solve this. However, it can also be done in&#xA;languages with no oop support via &lt;a href=&#34;zettelkasten/Closure%20in%20code.md&#34;&gt;Closure in code&lt;/a&gt;. Here, we stick with oop&#xA;because of poor nested function support in c++.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/communicative-binary-property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/communicative-binary-property/</guid>
      <description>&lt;p&gt;Let X be non-empty set.&#xA;Let $\oplus$ be a binary operation defined $\forall x, y \in$ X.&#xA;We say that $\oplus$ is &lt;strong&gt;Communicative&lt;/strong&gt; if:&#xA;$x \oplus y \equiv y \oplus x$&lt;/p&gt;&#xA;&lt;p&gt;similar to &lt;a href=&#34;Symmetric%20Relation.md&#34;&gt;Symmetric Relation&lt;/a&gt; properties&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/comparing-two-hypothesis-given-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/comparing-two-hypothesis-given-data/</guid>
      <description>&lt;h1 id=&#34;comparing-two-hypothesis-given-data&#34;&gt;Comparing two hypothesis given data&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;To compare two hypothesis, given data we have we can use &lt;a href=&#34;Proportional%20form%20of%20Bayes%20Rule.md&#34;&gt;Proportional form of Bayes Rule&lt;/a&gt;. It is often the easiest way. We often split the equation into two parts: &lt;a href=&#34;Bayes%20Factor.md&#34;&gt;Bayes Factor&lt;/a&gt;, and&#xA;&lt;a href=&#34;A%20priori%20chance.md&#34;&gt;A priori chance&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;$$\frac{P(H_1|D)}{P(H_2|D)}=\frac{P(H_1)\times P(D|H_1)}{P(H_2)\times P(D|H_2)}$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Because if we compare how much better does hypothesis one explain data compared to hypothesis two then $\frac1{P(D)}$ can be simplified out the equation.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/complete-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/complete-graph/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;A complete graph is one where there is unique edge between every pair of nodes. A complete graph with n vertices is denoted as the graph $K_n$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/complex-conjugate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/complex-conjugate/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Complex conjugation is the reflection symmetry with respect to real axis.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;notation&#34;&gt;Notation&lt;/h3&gt;&#xA;&lt;p&gt;for complex number $z$ it&amp;rsquo;s complex conjugate is noted as $\bar{z}$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/complex-multiplication-as-a-rotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/complex-multiplication-as-a-rotation/</guid>
      <description>&lt;h2 id=&#34;complex-numbers-in-rotations&#34;&gt;Complex numbers in rotations&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Complex%20number.md&#34;&gt;Complex number&lt;/a&gt; can be seen as a rotation tools. For eg. $i$ rotates 2d plane $90\degree$ counter clock-wise. it does so because real number $5 \cdot i=5i$ and that follows for any number on real axis. As general idea: any complex number we multiply by can be seen as a Matrix that rotates and/or squishes complex plane. Because complex number is a place where vector defining real part lands we can convert it entire computation to &lt;a href=&#34;Matrix%20multiplication.md&#34;&gt;Matrix multiplication&lt;/a&gt; and for every complex number $z = a+bi$ define matrix $M=\begin{bmatrix}a &amp;amp; -b \ b &amp;amp; a\end{bmatrix}$.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/complex-number/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/complex-number/</guid>
      <description>&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;A complex number is an element of a number system that extends the real numbers with a specific element denoted $i$, called the imaginary unit and satisfying the equation $i^2 = −1$.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;Set of Complex numbers is denoted by symbol $\mathbb{C}$.&lt;/p&gt;&#xA;&lt;p&gt;Every complex number can be expressed in the form $z=a+bi$, where a and b are real numbers where a is real part and b is imaginary part&#xA;Real part can be noted as $Re{z} = a$&#xA;Imaginary part can be noted as $Im{z} = b$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/complex-plane/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/complex-plane/</guid>
      <description>&lt;h2 id=&#34;complex-plane&#34;&gt;Complex plane&lt;/h2&gt;&#xA;&lt;p&gt;Complex plane is a cartesian plane with &lt;a href=&#34;Unit%20Vector.md&#34;&gt;unit vectors&lt;/a&gt; equal to ${1,0}$ and ${0,i}$. This allows for geometric interpretation of &lt;a href=&#34;Complex%20number.md&#34;&gt;Complex number&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/compose-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/compose-pattern/</guid>
      <description>&lt;h1 id=&#34;compose-pattern&#34;&gt;Compose pattern&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Function composition is process of creating big functions from small ones to solve more complex tasks. Part of a &lt;a href=&#34;Function%20programming&#34;&gt;Function programming&lt;/a&gt; theory.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Similar to &lt;a href=&#34;Pipe%20pattern.md&#34;&gt;Pipe pattern&lt;/a&gt;, main difference is in function order passing.&#xA;Similar to &lt;a href=&#34;Composed%20function.md&#34;&gt;Composed function&lt;/a&gt; in mathematics&lt;/p&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compose2&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fn1&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;composed&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;origValue&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn2&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn1&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;origValue&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Notice]&#xA;As in mathematical version of compose pattern, we first execute function on the right and only then the one on the left. Thus &lt;code&gt;fn2&lt;/code&gt; is executed after &lt;code&gt;fn1&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/composed-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/composed-function/</guid>
      <description>&lt;h1 id=&#34;composed-function&#34;&gt;Composed function&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Function that end result is based on an input from an output of another function. For example &lt;code&gt;f(g(x))&lt;/code&gt; is evaluated as &lt;code&gt;x -g(x)-&amp;gt; y -f(y)-&amp;gt; result&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;Given function &lt;code&gt;f&lt;/code&gt; and a function &lt;code&gt;g&lt;/code&gt;, we define composed function &lt;code&gt;h&lt;/code&gt;:&#xA;$$h = f(g(x))$$&#xA;We often use separate composition operator instead:&#xA;$$h = f(g(x)) = (f \circ g)(x)$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;It can often be much easier to create couple of small functions to solve a problem instead of creating solution all in one go. This pattern is commonly used in function programming. See &lt;a href=&#34;Compose%20pattern.md&#34;&gt;Compose pattern&lt;/a&gt; for better perspective&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/conditional-probability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/conditional-probability/</guid>
      <description>&lt;h1 id=&#34;conditional-probability&#34;&gt;Conditional probability&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Conditional probability is a measure of the probability of an event occurring, given that another event (by assumption, presumption, assertion or evidence) has already occurred.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;$$P(A\mid B)=\frac{P(A\cap B)}{P(B)}$$&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$P(A\mid B)$ is a conditional probability: the probability of event $A$ occurring given that $B$ is true. It is also called the posterior probability of $A$ given $B$.&lt;/li&gt;&#xA;&lt;li&gt;$P(A\cap B)$ is a probability of both $A$ and $B$ occurring.&lt;/li&gt;&#xA;&lt;li&gt;$P(B)$ is a probability of $B$ occurring&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;#TODO&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/connected-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/connected-components/</guid>
      <description>&lt;p&gt;Sometimes a graph is split into multiple components. It&amp;rsquo;s useful to be able to identify and count these components.&lt;/p&gt;&#xA;&lt;p&gt;To split graph into connected components it&amp;rsquo;s useful to mark each node with an id of the component that it&amp;rsquo;s in.&lt;/p&gt;&#xA;&lt;h2 id=&#34;solution-description&#34;&gt;Solution description&lt;/h2&gt;&#xA;&lt;p&gt;To do that you can use &lt;a href=&#34;Depth%20First%20Search%20(DFS).md&#34;&gt;Depth First Search (DFS)&lt;/a&gt; to identify components.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;make sure all nodes are labelled $[0,n)$ where n is the number of nodes.&lt;/li&gt;&#xA;&lt;li&gt;Start DFS at node 0.&lt;/li&gt;&#xA;&lt;li&gt;While exploring connected nodes mark them with id 0&lt;/li&gt;&#xA;&lt;li&gt;When function stops, all nodes of the component are visited&lt;/li&gt;&#xA;&lt;li&gt;Search for the lowest id that hasn&amp;rsquo;t been labelled and start DFS from that node this time with id 1&lt;/li&gt;&#xA;&lt;li&gt;continue until all nodes are marked&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudo&#34; data-lang=&#34;pseudo&#34;&gt;# Gloal or class scope variables&#xD;&#xA;n = number of nodes in the graph&#xD;&#xA;graph = adjancy list representing graph&#xD;&#xA;count = 0 # counts how many connected components there are&#xD;&#xA;components = empty integer array # size n&#xD;&#xA;visited = [false, ..., false] # size n&#xD;&#xA;&#xD;&#xA;function dfs(at):&#xD;&#xA;&#x9;if visited[at]: return&#xD;&#xA;&#x9;visited[at] = true&#xD;&#xA;&#x9;components[at] = true&#xD;&#xA;&#xD;&#xA;&#x9;neighbours = graph[at]&#xD;&#xA;&#x9;for next in neighbours:&#xD;&#xA;&#x9;&#x9;dfs(next)&#xD;&#xA;&#xD;&#xA;function findComponents():&#xD;&#xA;&#x9;for i=0,1,2,...,n-1:&#xD;&#xA;&#x9;&#x9;if not visited[i]:&#xD;&#xA;&#x9;&#x9;&#x9;count++&#xD;&#xA;&#x9;&#x9;&#x9;dfs(i)&#xD;&#xA;&#x9;return count, components&#xD;&#xA;&#xD;&#xA;# Start DFS at node zero&#xD;&#xA;number_of_conected_components, list_of_ids = findComponents()&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/constant-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/constant-function/</guid>
      <description>&lt;h1 id=&#34;constant-function&#34;&gt;Constant Function&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Function that always returns the same value. Part of &lt;a href=&#34;Function%20programming&#34;&gt;Function programming&lt;/a&gt; theory.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;constant&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;(){ &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;This code is very useful when we have an API that only accepts functions even if those functions only return a value. For example in JavaScript we have &lt;code&gt;then&lt;/code&gt; such that:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// will not work&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;p2&lt;/span&gt; ).&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// instead&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;( () =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p2&lt;/span&gt; ).&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;however, having a constant function:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/convolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/convolution/</guid>
      <description>&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;Formally we denote result $r$ of convolving functions $g,h$ like so:&#xA;$$r(t) = (g*h)(t) = \int_{-\infty}^{\infty}g(x)\cdot h(t-x)dx$$&#xA;Where $\cdot$ is point-wise multiplication&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;We can imagine this as a function that first creates some mirror image of one of the functions, then multiplies it point wise then shifts is to the right and repeats the process infinitely many times.&#xA;After that, it just sums all the results we got.&#xA;In practice we can will often just get the result for some interval and in the limit to infinity we get some real number.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/counting-the-number-of-in-and-out-edges-in-a-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/counting-the-number-of-in-and-out-edges-in-a-graph/</guid>
      <description>&lt;h1 id=&#34;counting-the-number-of-in-and-out-edges-in-a-graph&#34;&gt;Counting the number of in and out edges in a graph&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;To know the degree of each edge can be really useful when trying to find &lt;a href=&#34;Eulerian%20Path.md&#34;&gt;Eulerian Path&lt;/a&gt; of even &lt;a href=&#34;Eulerian%20cycle.md&#34;&gt;Eulerian cycle&lt;/a&gt;. This is very easily done in linear time for &lt;a href=&#34;Undirected%20Graph.md&#34;&gt;Undirected Graph&lt;/a&gt; however can be quite hard to be done efficiently for &lt;a href=&#34;Directed%20Graph.md&#34;&gt;Directed Graph&lt;/a&gt;. Code below is a suggestion on how to do it quickly.&lt;/p&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudo&#34; data-lang=&#34;pseudo&#34;&gt;function countInOutEdges(graph, N):&#xD;&#xA;&#x9;in_deg = [0,0,...,0] # size N&#xD;&#xA;&#x9;out_deg = [0,0,...,0] # size N&#xD;&#xA;&#xD;&#xA;&#x9;for (i=0;i&amp;lt;N;i++):&#xD;&#xA;&#x9;&#x9;neighbours = graph[i]&#xD;&#xA;&#x9;&#x9;out_deg[i] = len(neighbours)&#xD;&#xA;&#x9;&#x9;for neighbour in neighbours:&#xD;&#xA;&#x9;&#x9;&#x9;in_deg[neighbour]++&#x9;&#xD;&#xA;&#x9;return in_deg, out_deg&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;In this solution no work is done unnecessarily so it&amp;rsquo;s best solution so far.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/cramers-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/cramers-rule/</guid>
      <description>&lt;p&gt;We use Cramer&amp;rsquo;s rule to calculate a &lt;a href=&#34;System%20of%20linear%20equations.md&#34;&gt;System of linear equations&lt;/a&gt;.&#xA;For a square matrix $M_{n \times n}$ of any size defining the &lt;a href=&#34;Linear%20transformation.md&#34;&gt;Linear transformation&lt;/a&gt;, and a vector $\vec{v}$ of size $n$ result vector can be calculated using following algorithm:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;calculate a $det(M)$&lt;/li&gt;&#xA;&lt;li&gt;for each column in the matrix $M$ create new matrix with that column substituted with vector $\vec{v}$&lt;/li&gt;&#xA;&lt;li&gt;calculate a determinant of this new matrix&lt;/li&gt;&#xA;&lt;li&gt;save result to a corresponding component in result vector&lt;/li&gt;&#xA;&lt;li&gt;multiply vector by $\frac{1}{det(M)}$&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Result vector for 3d matrix:&#xA;$$\begin{bmatrix}&#xA;det(M sub_1 \vec{v} ) / det(M) \&#xA;det(M sub_2 \vec{v} ) / det(M) \&#xA;det(M sub_3 \vec{v} ) / det(M) \&#xA;\end{bmatrix}$$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/create-local-network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/create-local-network/</guid>
      <description>&lt;p&gt;To create a local network, you will need a router that supports the creation of a local network. Most modern routers have this capability built in, and the process for setting up a local network will vary depending on the specific model of router you are using.&lt;/p&gt;&#xA;&lt;p&gt;Generally, the steps for creating a local network are as follows:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Connect your router to your internet modem, and ensure that your internet connection is working.&lt;/li&gt;&#xA;&lt;li&gt;Access the router&amp;rsquo;s configuration page, which is typically done by opening a web browser and entering the router&amp;rsquo;s IP address in the address bar.&lt;/li&gt;&#xA;&lt;li&gt;Look for the network settings or wireless settings page on the router&amp;rsquo;s configuration page, and find the option to create a new wireless network (also known as a Wi-Fi network).&lt;/li&gt;&#xA;&lt;li&gt;Enter a name for your wireless network (also known as the SSID) and a password to secure the network.&lt;/li&gt;&#xA;&lt;li&gt;Save your changes and wait for the router to apply the new settings.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Once the local network has been created, you should be able to see the wireless network on any device with Wi-Fi capabilities, such as a laptop, smartphone, or tablet. You can connect to the network by entering the network name and password on your device. Once connected, you should be able to access the internet and any other devices on the local network.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/cross-product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/cross-product/</guid>
      <description>&lt;h1 id=&#34;cross-product&#34;&gt;Cross product&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt; taking two &lt;a href=&#34;Vector.md&#34;&gt;vectors&lt;/a&gt; as input and returning a real number. Order of vectors matters (impacts the sign of the result).&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;For given vectors $\vec{u}, \vec{v}$ dot product between then will be noted as $$\vec{u} \times \vec{v}$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;For given vectors $\vec{u}, \vec{v}$ cross product can be interpreted as:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For 2d: area of pararelopiped defined by those vectors&lt;/li&gt;&#xA;&lt;li&gt;For 3d: a vector that is perpendicular to the vectors and of magnitude equal to the area of those vectors&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If we visualise it we can see that the cross product for 3d is a vector that defines a volume of a shape defined by 2 vectors and dot product between this vector and any other 3d vector results in a volume for shape defined by 3 vectors.&#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=eu6i7WJeinw&amp;amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&amp;amp;index=10&#34;&gt;video explaining this fenomena more clearly and with animations&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/cryptoanalysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/cryptoanalysis/</guid>
      <description>&lt;h1 id=&#34;cryptoanalysis&#34;&gt;Cryptoanalysis&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Deducing the content of the &lt;a href=&#34;Plain%20text.md&#34;&gt;Plain text&lt;/a&gt; based on the &lt;a href=&#34;Ciphertext.md&#34;&gt;Ciphertext&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;It&amp;rsquo;s crucial for an attacker to know some information about the content of the plain message to know when he has cracked the message or found the proper Key. For example when cracking enigma it was know that they will look for readable German messages.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/cumulative-distribution-function-cdf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/cumulative-distribution-function-cdf/</guid>
      <description>&lt;h1 id=&#34;cumulative-distribution-function-cdf&#34;&gt;Cumulative Distribution Function (CDF)&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Function that maps $\mathbb{R} \rightarrow [0,1]$, satisfying $lim_{x\rightarrow -\infty} F(x) = 0$ and $lim_{x\rightarrow \infty} F(x) = 1$. In &lt;a href=&#34;continuous%20probability&#34;&gt;continuous probability&lt;/a&gt; it represents area under &lt;a href=&#34;Probability%20density%20function%20(PDF)&#34;&gt;Probability density function (PDF)&lt;/a&gt; from $-\infty$ to $x$.&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/curl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/curl/</guid>
      <description>&lt;p&gt;#TODO&lt;/p&gt;&#xA;&lt;h1 id=&#34;curl&#34;&gt;Curl&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;h2 id=&#34;additional-materials&#34;&gt;Additional materials&lt;/h2&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/current-divider-formula-cdf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/current-divider-formula-cdf/</guid>
      <description>&lt;h1 id=&#34;current-divider-formula&#34;&gt;Current divider formula&lt;/h1&gt;&#xA;&lt;p&gt;Note: we only consider parrarel connection because current flowing through series elements is ALLWAYS the same (in ideal case).&lt;/p&gt;&#xA;&lt;h2 id=&#34;for-a-pair-resistors&#34;&gt;For a pair resistors&lt;/h2&gt;&#xA;&lt;p&gt;$R_1,R_2$ and currents $I_1,I_2$ flowing though them then&#xA;$I_1 = I_{in} \frac{R_2}{R_1+R_2}$&#xA;$I_2 = I_{in} \frac{R_1}{R_1+R_2}$&lt;/p&gt;&#xA;&lt;h3 id=&#34;intution&#34;&gt;Intution&lt;/h3&gt;&#xA;&lt;p&gt;We take the value from &amp;ldquo;the other resistor&amp;rdquo; because when resistance of that resistor is gonna get bigger-&amp;gt;current though it is gonna get lower so current though &amp;ldquo;our&amp;rdquo; resistor is gonna get proportionally higher.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/current-source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/current-source/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;electronic%20circuit&#34;&gt;electronic circuit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;current-source&#34;&gt;Current Source&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221026210231.png&#34; alt=&#34;Pasted image 20221026210231&#34;&gt;&#xA;And here $i=j$.&#xA;Here $j[A]$ is the generated current&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/curry-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/curry-pattern/</guid>
      <description>&lt;h1 id=&#34;curry-pattern&#34;&gt;Curry pattern&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Creating new functions with subsequent calls providing more and more arguments. Part of &lt;a href=&#34;Function%20programming&#34;&gt;Function programming&lt;/a&gt; theory.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Instead of taking all arguments at once, or some number of arguments like in &lt;a href=&#34;Partial%20pattern.md&#34;&gt;Partial pattern&lt;/a&gt; we only pass a single argument in each function call.&lt;/p&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;curry&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arity&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextCurried&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;prevArgs&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [...&lt;span style=&#34;color:#a6e22e&#34;&gt;prevArgs&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nextArg&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arity&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;( ...&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextCurried&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;})([]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this code we collect arguments into a list and then we call function with those arguments spread when number of arguments is enough.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/d-flipflop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/d-flipflop/</guid>
      <description>&lt;h1 id=&#34;d-flipflop&#34;&gt;D FlipFlop&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Based on &lt;a href=&#34;D%20Latch.md&#34;&gt;D Latch&lt;/a&gt;. Instead of taking the raw clock signal as input now we consider only &amp;ldquo;rising edges&amp;rdquo; to be our &amp;ldquo;E&amp;rdquo; signal on the input.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;To make our d Latch respond only to rising edge of D flop we have to make a signal transformation taht yields a pulse when there in a rising edge.&lt;/p&gt;&#xA;&lt;p&gt;We could achieve it with and &lt;a href=&#34;AND%20gate.md&#34;&gt;AND gate&lt;/a&gt; with input of $E$ and $\bar{E}$. This results in a small delay on &lt;a href=&#34;NOT%20gate.md&#34;&gt;NOT gate&lt;/a&gt; that allows us to get a very short pulse that will allow us to use D latch in this new way.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/d-latch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/d-latch/</guid>
      <description>&lt;h1 id=&#34;d-latch&#34;&gt;D Latch&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221116211748.png&#34; alt=&#34;Pasted image 20221116211748&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;truth-table&#34;&gt;Truth table&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;E&lt;/th&gt;&#xA;          &lt;th&gt;D&lt;/th&gt;&#xA;          &lt;th&gt;Q&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;0&lt;/td&gt;&#xA;          &lt;td&gt;x&lt;/td&gt;&#xA;          &lt;td&gt;not changed&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;0&lt;/td&gt;&#xA;          &lt;td&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;So Q follows state of D if E is set to 1&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Good video explaining how we might come up with D Latch is &lt;a href=&#34;https://www.youtube.com/watch?v=peCh_859q7Q&#34;&gt;this video&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/data-base-anomalies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/data-base-anomalies/</guid>
      <description>&lt;p&gt;In general anomalies that we focus on are the ones when data is modified.&#xA;We have 3 main points of possible error:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Insertion&lt;/li&gt;&#xA;&lt;li&gt;Deletion&lt;/li&gt;&#xA;&lt;li&gt;Update&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;To mitigate any of the errors that arise from them we need to ensure that each change that our Data base describes results in exactly one operation.&#xA;We achieve this by following &lt;a href=&#34;Normalization%20in%20Data%20Bases.md#Normal%20Forms%20rules&#34;&gt;normal forms&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/dc-analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/dc-analysis/</guid>
      <description>&lt;h1 id=&#34;dc-analysis&#34;&gt;DC analysis&lt;/h1&gt;&#xA;&lt;p&gt;A DC solution to a circuit is a solution consisting entirely of constant signals (all voltages and currents)&lt;/p&gt;&#xA;&lt;p&gt;For DC all complicated ODEs normally ruling the circuits reduce to algebraic equations.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221028102718.png&#34; alt=&#34;Pasted image 20221028102718&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;At our desposal we allways have Kirchhoff&amp;rsquo;s laws (KCL, KVL) and device equations!&lt;/p&gt;&#xA;&lt;h2 id=&#34;nodal-method&#34;&gt;Nodal method&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Label all the nodes with variables $e_1,e_2,&amp;hellip;,e_n$ denoting electric potentials&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221028103037.png&#34; alt=&#34;Pasted image 20221028103037&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Labels all the currents $i_1,i_2,&amp;hellip;,i_n$ flowing into all the elements. For each n-terminal element we introduce $n-1$ new variables in tis way.&#xA;The current flowing out of the last terminal of an n-terminal element equals the sum of the currents flowing into all the other terminals.&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221028103400.png&#34; alt=&#34;Pasted image 20221028103400&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/de-morgans-laws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/de-morgans-laws/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;Logic%20Gates.md&#34;&gt;Logic Gates&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$\lnot (p \lor q) \Leftrightarrow  (\lnot p) \land (\lnot q)$&lt;/li&gt;&#xA;&lt;li&gt;$\lnot (p \land q) \Leftrightarrow  (\lnot p) \lor(\lnot q)$&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/depth-first-search-dfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/depth-first-search-dfs/</guid>
      <description>&lt;p&gt;The DFS is the most fundamental search algorithm used to explore nodes and edges of a &lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;. It runs with time complexity of $O(V+E)$ and is often used as a building block in other algorithms.&lt;/p&gt;&#xA;&lt;p&gt;By itself DFS isn&amp;rsquo;t that useful, but when augmented to perform other tasks such as count connected components, determine connectivity or find bridges/articulation points then DFS really shines.&lt;/p&gt;&#xA;&lt;p&gt;To code DFS you can either use recursion (it&amp;rsquo;s always depth first) or use &lt;a href=&#34;Stack.md&#34;&gt;Stack&lt;/a&gt; to build iterative solution&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/derivative-of-exponential-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/derivative-of-exponential-functions/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Exponential%20functions.md&#34;&gt;Exponential functions&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;&#xA;&lt;p&gt;Using definition of derivatives:&#xA;$$\frac{df}{dx}(x) = \lim_{dx \rightarrow 0}  \frac{f(x+dt) - f(x)}{dt} = \lim_{dx \rightarrow 0} \frac{\mathbb{c}^{x+dx} - \mathbb{c}^x}{dx} = \lim_{dx \rightarrow 0}\mathbb{c}^x\cdot \frac{\mathbb{c}^{dx}-1}{dx}$$&lt;/p&gt;&#xA;&lt;p&gt;So the derivative of this function is itself times some constant $\lim_{dx \rightarrow 0}\frac{\mathbb{c}^{dx}-1}{dx}$.&lt;/p&gt;&#xA;&lt;p&gt;Question: &amp;ldquo;Is there a special number for which this constant equals 1?&amp;rdquo;&#xA;Answer: &amp;ldquo;YES, there is, it&amp;rsquo;s a special number $e$&amp;rdquo;. In a sense it is what defines $e$.&#xA;Properties of this number e can be found &lt;a href=&#34;Number%20e.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/derivative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/derivative/</guid>
      <description>&lt;h1 id=&#34;derivative&#34;&gt;Derivative&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Derivative if a &lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt;. It creates a new function that checks how big of a change small &amp;ldquo;nudges&amp;rdquo; to the input change the output of original function.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;For single input function $f$&#xA;$$\frac{df}{dx}(x) = \lim_{dx \rightarrow 0}  \frac{f(x+dx) - f(x)}{dx}$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;h2 id=&#34;table-of-derivatives&#34;&gt;Table of derivatives&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Function&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Derivative&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Why?&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;scalars&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Scalars can be seen as a flat line on the number line, and so there is no rate of change&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$x^n,\ n\in \mathbb{N}-\set{0}$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$n\cdot x^{n-1}$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;This is the result of calculating the derivative directly (substitute $\rightarrow$ expand $\rightarrow$ shorten the result)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$ln(x)$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$\frac{1}{x}$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;Why%20derivative%20of%20ln(x)%20equals%201%20over%20x.md&#34;&gt;Why derivative of ln(x) equals 1 over x&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$e^x$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$e^x$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;It really is a special property it uses the fact that $\lim_{x \rightarrow 0}\frac{e^{x}-1}{x} = 1$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$e^{c\cdot x}$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$c\cdot e^{cx}$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Chain rule and previous derivative&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$\mathbb{c}^{x}$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$\mathbb{c}^{x} = ln(\mathbb{c})\cdot \mathbb{c}^{x}$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;Derivative%20of%20exponential%20functions.md&#34;&gt;Derivative of exponential functions&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;sin(x)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;cos(x)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;#TODO&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;cos(x)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-sin(x)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;#TODO&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;tan(x)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$\frac1{cos^2(x)}$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;#TODO&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$(fg)&#39;$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$f&amp;rsquo;g + fg&#39;$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Imagine a rectangle. nudges to it&amp;rsquo;s side are most visible as 2 lines of specific length&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$\frac{f}{g}$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$\frac{f&amp;rsquo;g - fg&amp;rsquo;}{g^2}$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Just ntational shorthand for a $(f\cdot \frac1g)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$arcsin(x)$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$\frac1{\sqrt{1-x^2}}$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;#TODO&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$arccos(x)$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$\frac{-1}{\sqrt{1-x^2}}$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;#TODO&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$arctan(x)$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$\frac1{1-x^2}$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;#TODO&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;additional-materials&#34;&gt;Additional materials&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Higher%20order%20derivatives.md&#34;&gt;Higher order derivatives&lt;/a&gt;&#xA;&lt;a href=&#34;Implicit%20differentiation.md&#34;&gt;Implicit differentiation&lt;/a&gt;&#xA;&lt;a href=&#34;Chain%20rule.md&#34;&gt;Chain rule&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/determinant-of-a-matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/determinant-of-a-matrix/</guid>
      <description>&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;We denote a determinant of a matrix $M$ as:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;det($M$)&lt;/li&gt;&#xA;&lt;li&gt;$\vert M \vert$&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Determinant is a factor by which a space is scaled by the matrix after a &lt;a href=&#34;Linear%20transformation.md&#34;&gt;Linear transformation&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Special cases:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If the determinant of a matrix is 0 then a transformation reduces a dimensionality of space. In other words makes the basis vectors &lt;a href=&#34;Linear%20dependence.md&#34;&gt;linearly dependent&lt;/a&gt;. For example turns a 2d space into a 1d line.&lt;/li&gt;&#xA;&lt;li&gt;If the determinant of a matrix is negative then a transformation &amp;ldquo;flips&amp;rdquo; the space as in flipping a sheet of paper.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;computation&#34;&gt;Computation&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Warning]&#xA;Only possible if square matrixes!!&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/device-port/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/device-port/</guid>
      <description>&lt;h1 id=&#34;device-port&#34;&gt;Device port&lt;/h1&gt;&#xA;&lt;p&gt;A port of a device is a pair of device terminals such that any current flowing in through one terminal of a port must flow out through the other terminal of the port.&lt;/p&gt;&#xA;&lt;p&gt;Every 2-terimnal device is automatically a one-port!&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/differential-equations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/differential-equations/</guid>
      <description>&lt;p&gt;Differential equations arise when it&amp;rsquo;s easier to describe change rather that absolute amounts. For example system of 3 bodies in space pulled by gravitational forces is such system.&#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=p_di4Zn4wz4&amp;amp;list=PLZHQObOWTQDNPOjrT6KVlfJuKtYTftqH6&amp;amp;index=1&#34;&gt;link to series of video explanations by 3blue1brown&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;We divide systems of differential equations into:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Ordinary%20Differential%20Equations&#34;&gt;Ordinary Differential Equations&lt;/a&gt; (ODE) - finite number of values changing with time.  &lt;a href=&#34;Examples%20of%20ODEs.md&#34;&gt;Examples of ODEs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Partial%20Differential%20Equations&#34;&gt;Partial Differential Equations&lt;/a&gt; (PDE) - deals with continuum of values (velocity of fluid in any given place or spread of heat in some physical body).  &lt;a href=&#34;Examples%20of%20PDEs.md&#34;&gt;Examples of PDEs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;higher-order-differential-equations&#34;&gt;Higher order differential equations&lt;/h2&gt;&#xA;&lt;p&gt;We note equation of n-th order based on the higest order of derivative in the equation.&#xA;Example: $y&amp;rsquo;&amp;rsquo; - 6y&amp;rsquo; + 9y = 0$ is a second order differential equation.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/digital-circuits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/digital-circuits/</guid>
      <description>&lt;p&gt;Digital circuits are &lt;a href=&#34;Electronic%20circuits&#34;&gt;Electronic circuits&lt;/a&gt; that use digital signals to represent and process information. &lt;a href=&#34;Digital%20signals&#34;&gt;Digital signals&lt;/a&gt; are &lt;a href=&#34;electrical%20signals&#34;&gt;electrical signals&lt;/a&gt; that can have only two &lt;a href=&#34;discrete&#34;&gt;discrete&lt;/a&gt; values, typically represented as &lt;a href=&#34;binary&#34;&gt;binary&lt;/a&gt; values of 0 and 1. Digital circuits use these binary values to encode and process information, allowing them to perform logical operations, store and manipulate data, and control other electronic devices.&lt;/p&gt;&#xA;&lt;p&gt;Digital circuits are built using a variety of electronic components, such as transistors, &lt;a href=&#34;Logic%20Gates.md&#34;&gt;Logic Gates&lt;/a&gt;, &lt;a href=&#34;Flip-Flops&#34;&gt;Flip-Flops&lt;/a&gt;, and &lt;a href=&#34;Registers.md&#34;&gt;Registers&lt;/a&gt;. These components are connected together in a specific arrangement, called a circuit, to perform the desired logical operations and processing of information.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/dijkstras-algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/dijkstras-algorithm/</guid>
      <description>&lt;h1 id=&#34;dijkstras-algorithm&#34;&gt;Dijkstra&amp;rsquo;s algorithm&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Dijkistra&amp;rsquo;s algorithm is a solution to Single Source Shortest Path (&lt;a href=&#34;SSSP&#34;&gt;SSSP&lt;/a&gt;) for non-negative &lt;a href=&#34;Weighted%20Graph.md&#34;&gt;Weighted Graph&lt;/a&gt;&#xA;Typically the efficieny of this algorithm is $O(E+log(V))$ which is really competetive against other algorithms.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Dijkitra&amp;rsquo;s algorithm can ONLY be run on graph with no negative edge weights. This allows us to let the algorithm act in a gready manner&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/directed-acyclic-graphs-dag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/directed-acyclic-graphs-dag/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;DAGs are directed graphs with no cycles. These graphs play important role in representing structures with dependencies.&#xA;Several efficient algorithms exist to operate on DAGs.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/directed-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/directed-graph/</guid>
      <description>&lt;p&gt;A directed graph or digraph is a graph in which edges have orientations. Edge $(u,v)$ is the edge from u to v and is not equal to node $(v,u)$.&#xA;&lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/distributive-binary-property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/distributive-binary-property/</guid>
      <description>&lt;p&gt;Let X be non-empty set.&#xA;Let $\bigoplus, \bigodot$ be two binary operations defined  $\forall x, y \in X$.&#xA;We say that $\bigoplus$ is &lt;strong&gt;Distributive&lt;/strong&gt; in respect to $\bigodot$ when both conditions are satisfied:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;$x \bigoplus ( y \bigodot z ) \Leftrightarrow ( x \bigoplus y ) \bigodot ( x \bigoplus z )$&lt;/li&gt;&#xA;&lt;li&gt;$( x \bigodot y ) \bigoplus z \Leftrightarrow ( x \bigoplus z ) \bigodot ( y \bigoplus z )$&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/divergence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/divergence/</guid>
      <description>&lt;p&gt;#TODO&lt;/p&gt;&#xA;&lt;h1 id=&#34;divergence&#34;&gt;Divergence&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;h2 id=&#34;additional-materials&#34;&gt;Additional materials&lt;/h2&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/document-loading-in-rag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/document-loading-in-rag/</guid>
      <description>&lt;h1 id=&#34;document-loading-in-rag&#34;&gt;Document loading in RAG&lt;/h1&gt;&#xA;&lt;p&gt;Document loading is first stage of building &lt;a href=&#34;RAG&#34;&gt;RAG&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/Document%20loading.png&#34; alt=&#34;Document loading.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/dot-product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/dot-product/</guid>
      <description>&lt;h1 id=&#34;dot-product&#34;&gt;Dot product&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt; taking two &lt;a href=&#34;Vector.md&#34;&gt;vectors&lt;/a&gt; as input and returning a real number. Order of vectors doesn&amp;rsquo;t matter.&#xA;The same as multiplication of $1 \times m$ matrix and a vector of size m.&#xA;So in fact it&amp;rsquo;s a linear transformation mapping a vector of arbitrary size to number line.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;For given vectors $\vec{u}, \vec{v}$ dot product between then will be noted as $$\vec{u} \cdot \vec{v}$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;For two vectors $\vec{w}, \vec{v}$ imagine projecting $\vec{w}$ onto $\vec{v}$. After multiplying length of projected $\vec{w}$ by length of $\vec{v}$ you get dot product of both vectors.&#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=LyGKycYT2v0&amp;amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&amp;amp;index=9&#34;&gt;here nice video animations by 3Blue1Brown&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/double-buffer-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/double-buffer-method/</guid>
      <description>&lt;h1 id=&#34;double-buffer-method&#34;&gt;Double Buffer method&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;In computer science it&amp;rsquo;s a method using 2 buffers of the same size to incorporate easier/more robust read/write methods. In principal, one buffer is used for read and the other for write. After needed computation buffers are swapped and process is repeated.&lt;/p&gt;&#xA;&lt;p&gt;Commonly use in graphics rendering and state-based simulations.&lt;/p&gt;&#xA;&lt;h2 id=&#34;common-problems&#34;&gt;Common problems&lt;/h2&gt;&#xA;&lt;h3 id=&#34;rotating-buffers&#34;&gt;Rotating buffers&lt;/h3&gt;&#xA;&lt;h4 id=&#34;when-this-happens&#34;&gt;When this happens?&lt;/h4&gt;&#xA;&lt;p&gt;In a case that we write to &amp;ldquo;next&amp;rdquo; buffer &lt;strong&gt;only&lt;/strong&gt; if condition is met we can get to a point where condition was true on last iteration but is never true after. Then we get continuously switching 2 state cell.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/doubly-linked-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/doubly-linked-list/</guid>
      <description>&lt;h1 id=&#34;doubly-linked-list&#34;&gt;Doubly Linked List&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;An extension of &lt;a href=&#34;Singly%20Linked%20List.md&#34;&gt;Singly Linked List&lt;/a&gt;. Difference is that each node holds &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt; pointer AND &lt;code&gt;prev&lt;/code&gt; pointer. This makes any algorithm modifying the doubly linked list MUCH easier than in singly linked list.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;graph LR&#xD;&#xA;    head --&amp;gt; A{{A}} --&amp;gt;|next| B{{B}} --&amp;gt;|next| C{{C}} --&amp;gt;|next| D{{D}}&#xD;&#xA;&#x9;D --&amp;gt;|prev| C --&amp;gt;|prev| B --&amp;gt;|prev| A&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;p&gt;#TODO  create this class and add it to github + add link here&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/dspy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/dspy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.removepaywall.com/search?url=https://medium.com/aiguys/prompt-engineering-is-dead-dspy-is-new-paradigm-for-prompting-c80ba3fc4896&#34;&gt;link&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;zettelkasten/Prompt%20engineering.md&#34;&gt;Prompt engineering&lt;/a&gt;&#xA;&lt;a href=&#34;zettelkasten/LLM.md&#34;&gt;LLM&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;dspy&#34;&gt;DSPy&lt;/h1&gt;&#xA;&lt;p&gt;DSPy is &lt;strong&gt;an open-source tool created by Stanford University that &amp;ldquo;compiles declarative language model calls into self-improving pipelines.&amp;rdquo;&lt;/strong&gt; Instead of spending time crafting perfect prompts, DSPy lets you program the AI models directly. This makes AI apps more reliable and easier to scale.&lt;/p&gt;&#xA;&lt;p&gt;DSPy is an interesting framework aiming to provide a PyTorch like feel in a Language Model application developement.&lt;/p&gt;&#xA;&lt;p&gt;Link to repo with some nice README.md &lt;a href=&#34;https://github.com/stanfordnlp/dspy/tree/main?tab=readme-ov-file&#34;&gt;here&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/dynamic-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/dynamic-programming/</guid>
      <description>&lt;p&gt;This note is inspired by video by SimonDev&lt;img src=&#34;https://www.youtube.com/watch?v=6z4ePR7YYa8&#34; alt=&#34;here&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Main idea in his video is: Dynamic programming is a set of patterns that are more &amp;ldquo;common sense&amp;rdquo; rather than some complicated or brilliant ideas.&lt;/p&gt;&#xA;&lt;p&gt;In general, solving problems dynamically is to split large problems and those into smaller problems, solving those sub-problems and remembering results to avoid repetition.&lt;/p&gt;&#xA;&lt;p&gt;Key thing to get right is &amp;ldquo;optimal substructure&amp;rdquo;. The idea is that if you solve all sub-problems optimally, you solve the main problem.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/edge-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/edge-list/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Graph%20representation.md&#34;&gt;Graph representation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;An edge list is a way to represent a graph simply as an unordered list of edges. Assume the notation for any triplet (u,v,w) means &amp;ldquo;cost from node u to node v is w&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;This is not used often due to it&amp;rsquo;s lack of structure. However, it is conceptually simple and practical in handful of algorithms.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Pros&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Cons&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Space efficient for representing sparse graphs&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Less space efficient for denser graphs.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Iterating over all edges is efficient&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Edge weight lookup is $O(E)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Very simple graph representation&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/eigenbasis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/eigenbasis/</guid>
      <description>&lt;h1 id=&#34;eigenbasis&#34;&gt;Eigenbasis&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Eigenbasis is a &lt;a href=&#34;Basis%20of%20vector%20space.md&#34;&gt;Basis of vector space&lt;/a&gt;, where vectors defining the span are &lt;a href=&#34;Eigenvector.md&#34;&gt;eigenvectors&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;As is with the &amp;ldquo;normal&amp;rdquo; change of basis matrix we write it as $$M = T^{-1}AT$$&#xA;Where $T$ is change of basis matrix and $A$ is original matrix&#xA;In case of the eigenbasis, $M$ is guaranteed to be diagonal, with it&amp;rsquo;s &lt;a href=&#34;Eigenvalue.md&#34;&gt;eigenvalues&lt;/a&gt; on the diagonal&lt;/p&gt;&#xA;&lt;h2 id=&#34;calculation&#34;&gt;Calculation&lt;/h2&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/eigenvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/eigenvalue/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Factor by which &lt;a href=&#34;Eigenvector.md&#34;&gt;Eigenvector&lt;/a&gt; are scaled during &lt;a href=&#34;Linear%20transformation.md&#34;&gt;Linear transformation&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Warning]&#xA;Not every linear transformation has eigenvalue!&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;calculation&#34;&gt;Calculation&lt;/h2&gt;&#xA;&lt;p&gt;First it may be beneficial to rewrite equation defining eigenvector.&#xA;This way, after some transformations we obtain:&#xA;$$(A-\lambda I)\vec{v} = \vec{0}$$&#xA;To solve this we could say that $\vec{v}=0$ but that does not get us closer to finding true solution.&#xA;Rather, we will focus on $A-\lambda I$ part. In practice it&amp;rsquo;s just subtracting $\lambda$ from diagonal axis.&#xA;Now, we can exploit that &lt;a href=&#34;Eigenvector.md&#34;&gt;Eigenvector&lt;/a&gt; is on a null space (kernel) of the new matrix. This way if we have a transformation that &amp;ldquo;squishes&amp;rdquo; space to smaller dimension. This of course only happens when we have determinant equal to 0.&#xA;Equation to make it more visual:&#xA;$$det(A-\lambda I) = 0$$&#xA;Now, if we don&amp;rsquo;t remember what determinant is we may be tempted to just try all possible lambdas and see what happens.&#xA;We can also just expand &lt;a href=&#34;Determinant%20of%20a%20matrix.md&#34;&gt;Determinant of a matrix&lt;/a&gt; equation and solve for $\lambda$.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/eigenvector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/eigenvector/</guid>
      <description>&lt;h1 id=&#34;eigenvector&#34;&gt;Eigenvector&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;A nonzero vector that changes at most by a scalar factor when that &lt;a href=&#34;Linear%20transformation.md&#34;&gt;Linear transformation&lt;/a&gt; is applied to it. The corresponding &lt;a href=&#34;Eigenvalue.md&#34;&gt;Eigenvalue&lt;/a&gt;, often denoted by $\lambda$ , is the factor by which the eigenvector is scaled.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Warning]&#xA;Not every linear transformation has eigenvectors or enough vectors to describe original system of coordinates fully!&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;Every eigenvector must satisfy the equation:&#xA;$$A\cdot \vec{v} = \lambda \cdot \vec{v}$$&#xA;Where $A$ is a matrix describing transformation, $\vec{v}$ is an eigenvector and $\lambda$ is it&amp;rsquo;s eigenvalue.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/encryption-algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/encryption-algorithm/</guid>
      <description>&lt;h1 id=&#34;encryption-algorithm&#34;&gt;Encryption algorithm&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Set of instructions to turn &lt;a href=&#34;Plain%20text.md&#34;&gt;Plain text&lt;/a&gt; into &lt;a href=&#34;Ciphertext.md&#34;&gt;Ciphertext&lt;/a&gt;. It&amp;rsquo;s behavior depends on the original message and special &lt;a href=&#34;Encryption%20Key&#34;&gt;Encryption Key&lt;/a&gt;, both of which constitute the input of the algorithm.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;If we have encryption algorithm there needs to exist some &lt;a href=&#34;Decryption%20algorithm&#34;&gt;Decryption algorithm&lt;/a&gt; with it&amp;rsquo;s &lt;a href=&#34;Decryption%20Key&#34;&gt;Decryption Key&lt;/a&gt; to turn &lt;a href=&#34;Ciphertext.md&#34;&gt;Ciphertext&lt;/a&gt; back into &lt;a href=&#34;Plain%20text.md&#34;&gt;Plain text&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/encryption/</guid>
      <description>&lt;h1 id=&#34;encryption&#34;&gt;Encryption&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Way of encoding an information in a way that prevent unauthorized people from access its content.&#xA;Examples include:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;file encryption on local machine&lt;/li&gt;&#xA;&lt;li&gt;message encryption in between peers across media like internet&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;To denote encryption of message $M_{1}$ using key $k_{1}$ we write&#xA;$$E_{k_{1}}(M_{1})$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Warning]&#xA;Remember that the use of encryption has to be motivated in some way. If there is no real benefit to using encryption then we add overhead to the process in question.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/energy-dc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/energy-dc/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;electronic%20circuit&#34;&gt;electronic circuit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;energy&#34;&gt;Energy&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221127221325.png&#34; alt=&#34;Pasted image 20221127221325&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221127221305.png&#34; alt=&#34;Pasted image 20221127221305&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221127221925.png&#34; alt=&#34;Pasted image 20221127221925&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221127221840.png&#34; alt=&#34;Pasted image 20221127221840&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221127221910.png&#34; alt=&#34;Pasted image 20221127221910&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221127224133.png&#34; alt=&#34;Pasted image 20221127224133&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/equivalence-of-dfas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/equivalence-of-dfas/</guid>
      <description>&lt;p&gt;[[ELAC]]&#xA;Presentation 6 of ELAC presentations, page 30+&lt;/p&gt;&#xA;&lt;p&gt;this and state minimization need to be on the cheatsheet!!&lt;/p&gt;&#xA;&lt;p&gt;Also don&amp;rsquo;t forget about k-paths!!&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/equivalence-relation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/equivalence-relation/</guid>
      <description>&lt;p&gt;One of &lt;a href=&#34;Relation%20in%20Mathematics.md&#34;&gt;Relation in Mathematics&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;A relation is an equivalence relation if it satisfies the properties of being:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Reflexive%20Relation.md&#34;&gt;Reflexive Relation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Symmetric%20Relation.md&#34;&gt;Symmetric Relation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Transitive%20Relation.md&#34;&gt;Transitive Relation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/equivalent-devices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/equivalent-devices/</guid>
      <description>&lt;h1 id=&#34;equivalent-devices&#34;&gt;Equivalent devices&lt;/h1&gt;&#xA;&lt;p&gt;In some cases devices can act like other devices, therefor we can simplify the schematic to what we need. Ussually we will reduce elements to either a wire or open circuit (cuz they are the easiest).&lt;/p&gt;&#xA;&lt;p&gt;In DC case:&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221028105652.png&#34; alt=&#34;Pasted image 20221028105652&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/eulerian-cycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/eulerian-cycle/</guid>
      <description>&lt;h1 id=&#34;eulerian-circuit&#34;&gt;Eulerian circuit&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;An Eulerian circuit is an &lt;a href=&#34;Eulerian%20Path.md&#34;&gt;Eulerian Path&lt;/a&gt; which starts and ends on the same vertex.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Counting%20the%20number%20of%20in%20and%20out%20edges%20in%20a%20graph.md&#34;&gt;Counting the number of in and out edges in a graph&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;undirected-graph&#34;&gt;Undirected Graph&lt;/h3&gt;&#xA;&lt;p&gt;Every vertex has an even degree&lt;/p&gt;&#xA;&lt;h3 id=&#34;directed-graph&#34;&gt;Directed Graph&lt;/h3&gt;&#xA;&lt;p&gt;Every vertex has equal indegree and outdegree&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/eulerian-path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/eulerian-path/</guid>
      <description>&lt;h1 id=&#34;eulerian-path&#34;&gt;Eulerian Path&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;An Eulerian Path is a path of edges that visits all edges in a graph exactly once.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Counting%20the%20number%20of%20in%20and%20out%20edges%20in%20a%20graph.md&#34;&gt;Counting the number of in and out edges in a graph&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;undirected-graph&#34;&gt;Undirected Graph&lt;/h3&gt;&#xA;&lt;p&gt;Either every vertex has even degree or exactly two vertices have odd degree.&lt;/p&gt;&#xA;&lt;h3 id=&#34;directed-graph&#34;&gt;Directed Graph&lt;/h3&gt;&#xA;&lt;p&gt;At most one vertex has (outdegree) - (indegree) = 1&#xA;and at most one vertex has (indegree) - (outdegree) = 1 and all other vertices have equal in and out degrees.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/exact-method-for-solving-odes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/exact-method-for-solving-odes/</guid>
      <description>&lt;h1 id=&#34;solving-ode&#34;&gt;Solving ODE&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Turn equation into a form: $f(x,y) := P(x,y) dx + Q(x,y) dy = 0$&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Calculate $P_y, Q_x$&#xA;&lt;strong&gt;Step 3:&lt;/strong&gt; calculate $Q_x-P_y$.&#xA;if equal to 0: follow to step 4, else follow the &lt;a href=&#34;Integrating%20factor%20for%20exact%20method.md&#34;&gt;Integrating factor for exact method&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Remember: $f_x = P, f_y = Q$, so to get a function $f$ we need to&#xA;&lt;strong&gt;Step 4:&lt;/strong&gt;  integrate $P$ over $x$ or $Q$ over $y$.&#xA;$$f(x,y) = \int{P dx} = \int{Q dy}$$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/examples-of-odes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/examples-of-odes/</guid>
      <description>&lt;h2 id=&#34;examples-of-odes&#34;&gt;Examples of ODEs&lt;/h2&gt;&#xA;&lt;h3 id=&#34;example1---freefalling-body&#34;&gt;Example1 - freefalling body&lt;/h3&gt;&#xA;&lt;p&gt;Gravitational acceleration near surface of air: $\frac{-9.8 \ m/s}{s}$.&#xA;This mean that if you have a body in freefall through space it will accrue (accumulate in regular ammounts of time) an additional downward component of 9.8$\frac{m}{s}$ every second. we call this constant g. This sistem is enough to creaete a simple differential equation albeit a relatively simple one.&#xA;Think of the position of the body as a function of time. It&amp;rsquo;s derivative gives the vertical component of velocity, whose derivative in turn gives the vertical component of acceleration.&#xA;For compactness let&amp;rsquo;s describe this function $y(t)$, it&amp;rsquo;s derivative $\dot{y}(t)$, and second derivative a $\ddot{y}(t)$.&#xA;We know that $\ddot{y}(t)$ = -g. then to get the velocity we can integrate and get $\dot{y}(t)$ = -gt + $v_0$ where $v_0$ is initial velocity. To get the position of the body we integrate again and get $y(t) = -\frac{1}{2} gt^2 + v_0t + y_0$. $y_0$ is initial position of the body.&#xA;Note: we couldn&amp;rsquo;t do this if the acceleration of the body was dependent on other body whose acceleration was determined by the posion of the first (Solar system simulation for example).&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/examples-of-pdes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/examples-of-pdes/</guid>
      <description>&lt;h2 id=&#34;examples-of-pdes&#34;&gt;Examples of PDEs&lt;/h2&gt;&#xA;&lt;h3 id=&#34;heat-equation&#34;&gt;Heat equation&lt;/h3&gt;&#xA;&lt;p&gt;$\frac{\partial T}{\partial t} = \alpha \nabla^2T$&lt;/p&gt;&#xA;&lt;h4 id=&#34;simple-1d-example&#34;&gt;Simple 1d example&lt;/h4&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s say you have an object like a piece of metal and you know how the heat is distributed across it at any given moment (how hot each element of the plate is) how will this distribution change over time?&#xA;lte&amp;rsquo;s start simpler - with 2 rods being connected tip to tip. One in hot, maybe $90\degree C$ and the other  cold, maybe $10\degree C$. How does this system change? Let&amp;rsquo;s create a function $T(x)$ where for each point in this 1d example.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/expx-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/expx-function/</guid>
      <description>&lt;p&gt;Exp function is defined by a &lt;a href=&#34;Taylor%20series.md&#34;&gt;Taylor series&lt;/a&gt; of &lt;a href=&#34;Number%20e.md&#34;&gt;Number e&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;formal-definition&#34;&gt;Formal definition&lt;/h2&gt;&#xA;&lt;p&gt;Definition for number $e^1$.&lt;br&gt;&#xA;$$exp(x) := \sum_{k=0}^{\infty} \frac{x^k}{k!} = 1+x+\frac{x^2}{2}+\frac{x^3}{6}+\frac{x^4}{24}+&amp;hellip;$$&lt;/p&gt;&#xA;&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;$exp(x+y) = exp(x)*exp(y)$&lt;/li&gt;&#xA;&lt;li&gt;equal to limit $\lim_{n\rightarrow \infty} (1 + \frac{x}{n})^n$&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/exponential-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/exponential-functions/</guid>
      <description>&lt;p&gt;Exponential function is a function that takes in a constant number and returns a certain power of that of that function.&#xA;A constant to the power x can be noted as $\mathbb{c}^x$ and be made a function $f(x) = \mathbb{c}^x$&lt;/p&gt;&#xA;&lt;p&gt;The most fundamental and special exponential function is $e^x$, where $\mathbb{c}$ in $\mathbb{c}^x$ was substituted with &lt;a href=&#34;Number%20e.md&#34;&gt;number e&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/factorial-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/factorial-function/</guid>
      <description>&lt;p&gt;#TODO&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/filter-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/filter-pattern/</guid>
      <description>&lt;h1 id=&#34;filter-pattern&#34;&gt;Filter pattern&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Pattern of excluding some values from an &lt;a href=&#34;Array&#34;&gt;Array&lt;/a&gt; given some condition. Common part of &lt;a href=&#34;Function%20programming&#34;&gt;Function programming&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Often, implementation is to create new array given some predicate function.&#xA;Technically it is not needed but often it is.&lt;/p&gt;&#xA;&lt;p&gt;Value is passed on to the new array if predicate function evaluates to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Standard signature for filter function is &lt;code&gt;filter(predicateFn, arr)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;example-in-python&#34;&gt;Example in python:&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_even&lt;/span&gt;(x): &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;even_numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; filter(is_even, arr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(list(even_numbers)) &lt;span style=&#34;color:#75715e&#34;&gt;# [0,2,4,6,8]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that in python we need to convert it to list as by default &lt;code&gt;filter&lt;/code&gt; returns iterator.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/finding-articulation-points-in-the-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/finding-articulation-points-in-the-graph/</guid>
      <description>&lt;h1 id=&#34;finding-articulation-points-in-the-graph&#34;&gt;Finding articulation points in the graph&lt;/h1&gt;&#xA;&lt;h2 id=&#34;desription&#34;&gt;Desription&lt;/h2&gt;&#xA;&lt;p&gt;Algorithm used for finding &lt;a href=&#34;Articulation%20points.md&#34;&gt;Articulation points&lt;/a&gt; in a &lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Note: here we will use the idea of cycles!&lt;/p&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudo&#34; data-lang=&#34;pseudo&#34;&gt;id = 0&#xD;&#xA;g = graph (as adjency list)&#xD;&#xA;n = size of the graph&#xD;&#xA;outEdgeCount&#xD;&#xA;&#xD;&#xA;# i index represents node i&#xD;&#xA;ids = [0,0,...,0] # len = n&#xD;&#xA;low = [0,0,...,0] # len = n&#xD;&#xA;visited = [false, false,...,false] # len = n&#xD;&#xA;isArt = [false, false,...,false] # len = n&#xD;&#xA;&#xD;&#xA;function findBridges():&#xD;&#xA;&#x9;bridges = []&#xD;&#xA;&#x9;for (i=0;i&amp;lt;n;++i):&#xD;&#xA;&#x9;&#x9;if (!visited[i]):&#xD;&#xA;&#x9;&#x9;&#x9;outEdgeCount = 0&#xD;&#xA;&#x9;&#x9;&#x9;dfs(i, i, -1)&#xD;&#xA;&#x9;&#x9;&#x9;isArt[i] = outEdgeCount &amp;gt; 1&#xD;&#xA;&#x9;return bridges&#xD;&#xA;&#xD;&#xA;# Modified DFS here:&#xD;&#xA;function dfs(at, parent, bridges):&#xD;&#xA;&#x9;if (parent == root): outEdgeCount++&#xD;&#xA;&#x9;visited[at] = true&#xD;&#xA;&#x9;id+=1&#xD;&#xA;&#x9;low[at] = ids[at] = id&#xD;&#xA;&#xD;&#xA;&#x9;for (to: g[at]):&#xD;&#xA;&#x9;&#x9;if to == parrent: continue&#xD;&#xA;&#x9;&#x9;if (!visited[to]):&#xD;&#xA;&#x9;&#x9;&#x9;dfs(to, at, bridges)&#xD;&#xA;&#x9;&#x9;&#x9;low[at] = min(low[at], low[to])&#xD;&#xA;&#x9;&#x9;&#x9;if (ids[at] &amp;lt;= low[to]):&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;isArt[at] = true&#xD;&#xA;&#x9;&#x9;else:&#xD;&#xA;&#x9;&#x9;&#x9;low[at] = min(low[at], ids[to])&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note: this algorithm already does two steps in one go! Therefore it&amp;rsquo;s complexity is $O(V+E)$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/finding-bridges-in-the-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/finding-bridges-in-the-graph/</guid>
      <description>&lt;h1 id=&#34;finding-bridges-in-the-graph&#34;&gt;Finding bridges in the graph&lt;/h1&gt;&#xA;&lt;h2 id=&#34;desription&#34;&gt;Desription&lt;/h2&gt;&#xA;&lt;p&gt;Algorithm used for finding &lt;a href=&#34;Bridges.md&#34;&gt;Bridges&lt;/a&gt; in a &lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudo&#34; data-lang=&#34;pseudo&#34;&gt;id = 0&#xD;&#xA;g = graph (as adjency list)&#xD;&#xA;n = size of the graph&#xD;&#xA;&#xD;&#xA;# i index represents node i&#xD;&#xA;ids = [0,0,...,0] # len = n&#xD;&#xA;low = [0,0,...,0] # len = n&#xD;&#xA;visited = [false, false,...,false] # len = n&#xD;&#xA;&#xD;&#xA;function findBridges():&#xD;&#xA;&#x9;bridges = []&#xD;&#xA;&#x9;for (i=0;i&amp;lt;n;++i):&#xD;&#xA;&#x9;&#x9;if (!visited[i]):&#xD;&#xA;&#x9;&#x9;&#x9;dfs(i, -1, bridges)&#xD;&#xA;&#x9;return bridges&#xD;&#xA;&#xD;&#xA;# Modified DFS here:&#xD;&#xA;function dfs(at, parent, bridges):&#xD;&#xA;&#x9;visited[at] = true&#xD;&#xA;&#x9;id+=1&#xD;&#xA;&#x9;low[at] = ids[at] = id&#xD;&#xA;&#xD;&#xA;&#x9;for (to: g[at]):&#xD;&#xA;&#x9;&#x9;if to == parrent: continue&#xD;&#xA;&#x9;&#x9;if (!visited[to]):&#xD;&#xA;&#x9;&#x9;&#x9;dfs(to, at, bridges)&#xD;&#xA;&#x9;&#x9;&#x9;low[at] = min(low[at], low[to])&#xD;&#xA;&#x9;&#x9;&#x9;if (ids[at] &amp;lt; low[to]):&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;bridges.add(at)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;bridges.add(to)&#xD;&#xA;&#x9;&#x9;else:&#xD;&#xA;&#x9;&#x9;&#x9;low[at] = min(low[at], ids[to])&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note: this algorithm already does two steps in one go! Therefore it&amp;rsquo;s complexity is $O(V+E)$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/finding-path-on-the-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/finding-path-on-the-graph/</guid>
      <description>&lt;p&gt;We often have algorithms that look for the shortest/longest paths on the &lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;, but often the implementations return just &amp;ldquo;length&amp;rdquo; not the path to end node.&#xA;In those implementations we often store &amp;ldquo;dist&amp;rdquo; arrays that old optimal paths from start node.&#xA;To be able to tell how to get to end node we need to also store &amp;ldquo;prev&amp;rdquo; or &amp;ldquo;from&amp;rdquo; array also of length n.&lt;/p&gt;&#xA;&lt;p&gt;To complete array: in the same time as we update shortest path to the node we also update &amp;ldquo;prev&amp;rdquo; array and set it&amp;rsquo;s value to the node we found better path from (current node)&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/floyd-warshall-algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/floyd-warshall-algorithm/</guid>
      <description>&lt;h1 id=&#34;floyd-warshall-algorithm&#34;&gt;Floyd Warshall algorithm&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Floyd Warshall algorithm is a All-Pairs Shortest Path &lt;a href=&#34;APSP&#34;&gt;APSP&lt;/a&gt; algorithm Which means it can find the shortest path between all pairs of nodes. It&amp;rsquo;s time complexity is $O(V^3)$ which makes it ideal for graphs with no more than couple hundred nodes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/fock-matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/fock-matrix/</guid>
      <description>&lt;p&gt;In quantum chemistry, the Fock Matrix (also known as the Fock operator or the Fock matrix representation) is a &lt;a href=&#34;Matrix.md&#34;&gt;Matrix&lt;/a&gt; that represents the effective one-electron Hamiltonian for a system of electrons in a given molecular orbital basis. The matrix elements of the Fock matrix are given by $F_{pq} = h_{pq} + \sum_{i}^{occ} \sum_{r}^{basis} (2J_{prqs} - K_{prqs}) \phi_r(i) \phi_s(i)$ where $h_{pq}$ is the one-electron part of the Hamiltonian, which includes the kinetic energy and the potential energy of the electrons due to the nuclei; $J_{prqs}$ and $K_{prqs}$ are the Coulomb and exchange integrals, respectively, which describe the electron-electron interactions; and the sum is over all occupied molecular orbitals and all basis functions.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/fourier-series/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/fourier-series/</guid>
      <description>&lt;h1 id=&#34;fourier-series&#34;&gt;Fourier series&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;$$&#xA;\hat g(t) = \int_{t_{1}}^{t_{2}}g(t)\cdot e^{-2\pi ift} dt&#xA;$$&#xA;Where limit of $t_{1}, t_{2}$ is $\infty$.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Fourier series is a method that can be used to decompose functions into it&amp;rsquo;s harmonics. This allows us to solve the problem for those simple harmonics and then sum them up, rather than solve one complex system&lt;/p&gt;&#xA;&lt;h3 id=&#34;lab-manual-explanation-for-electrical-circuits&#34;&gt;Lab manual explanation for Electrical circuits&lt;/h3&gt;&#xA;&lt;p&gt;A signal $x(t)$ is called periodic if there exists a number $T &amp;gt; 0$, called a period of the signal, such that for every time instant t the following equality holds&#xA;$$x(t+T)=x(t)$$&#xA;In the remaining part of this chapter, we assume that $T$ is a fundamental period, i.e., it is the smallest period of the given signal. If a series&#xA;$$X_{0} + X_{1m}\cos(\omega t + \phi_{1}) + X_{2m}\cos(2\omega t + \phi_{2}) + \dots$$&#xA;is point-wise convergent to $x(t)$ at every continuity point of x then it is called a Fourier series of signal $x$.&#xA;If series above is the Fourier series of signal $x$, then its coefficients are given by following formulas&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221214211842.png&#34; alt=&#34;Pasted image 20221214211842&#34;&gt; #TODO  - rewrite this&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/function-in-mathematics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/function-in-mathematics/</guid>
      <description>&lt;p&gt;The set of input elements has a relation with the set of output elements, and that relation is known as the function.&lt;/p&gt;&#xA;&lt;p&gt;In every function: $\forall x \in X, \exists y \in Y : X \rightarrow Y$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/function-pointer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/function-pointer/</guid>
      <description>&lt;h1 id=&#34;function-pointer&#34;&gt;Function pointer&lt;/h1&gt;&#xA;&lt;p&gt;Function pointers in C and C++ have following structure&#xA;&lt;code&gt;return_type (*fn_pointer_name) (argument_type, ...)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;c-example&#34;&gt;C++ example&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;multiply&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// declare function pointer called func &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;func) (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// assign pointer to `multiply` function &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; multiply;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; func(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/function-vs-relation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/function-vs-relation/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;Relation%20in%20Mathematics.md&#34;&gt;Relation in Mathematics&lt;/a&gt; and &lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt; both are different concepts.&lt;/p&gt;&#xA;&lt;p&gt;All the functions are relations, but the relation cannot be function.&lt;/p&gt;&#xA;&lt;p&gt;The relation and function have the main difference, i.e., &lt;strong&gt;a relation is able to generate many outputs for at least one input&lt;/strong&gt;, but in the case of function, it can only generate one output for every input. This factor is very basic to differentiate between them.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/game-loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/game-loop/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Game%20design&#34;&gt;Game design&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;game-loop&#34;&gt;Game loop&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Removes the dependence of user input and processor speed. Essential part of any program that handles user input.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Note based on &amp;ldquo;Programowanie gier Wzorce&amp;rdquo; by Robert Nystrom&lt;/p&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Note]&#xA;In following code I use infinite loops with &lt;code&gt;while (true)&lt;/code&gt; logic. This is done for simplicity but realistically this is never the case as this does no allow the program termination. Use &lt;code&gt;while (!done)&lt;/code&gt; and handle &lt;code&gt;done&lt;/code&gt; flag accordingly.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/gamma-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/gamma-function/</guid>
      <description>&lt;p&gt;#TODO&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/gaussian-elimination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/gaussian-elimination/</guid>
      <description>&lt;p&gt;A method of calculating an &lt;a href=&#34;Inverse%20matrix.md&#34;&gt;Inverse matrix&lt;/a&gt; of a matrix.&lt;/p&gt;&#xA;&lt;h3 id=&#34;computation&#34;&gt;Computation&lt;/h3&gt;&#xA;&lt;p&gt;#TODO!! computation part needed&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/google-search-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/google-search-options/</guid>
      <description>&lt;h2 id=&#34;searching-exact-phrases&#34;&gt;Searching exact phrases&lt;/h2&gt;&#xA;&lt;p&gt;by default google looks for synonyms and uses fuzzy search to match query.&#xA;you can use double quotes to match exact phrase: &amp;quot;&amp;quot;&lt;/p&gt;&#xA;&lt;h2 id=&#34;search-site-related-links&#34;&gt;Search site related links&lt;/h2&gt;&#xA;&lt;p&gt;Use &lt;code&gt;site:[url]&lt;/code&gt; to get results from this site only&lt;/p&gt;&#xA;&lt;h2 id=&#34;exclude-term&#34;&gt;Exclude term&lt;/h2&gt;&#xA;&lt;p&gt;use minus &lt;code&gt;-&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;filter-by-date&#34;&gt;Filter by date&lt;/h2&gt;&#xA;&lt;p&gt;use &lt;code&gt;after:[date]&lt;/code&gt; and &lt;code&gt;before:[date]&lt;/code&gt; to limit results by need&lt;/p&gt;&#xA;&lt;h2 id=&#34;use-range&#34;&gt;Use range&lt;/h2&gt;&#xA;&lt;p&gt;to create range, use the two dots &lt;code&gt;..&lt;/code&gt; between numbers like 10..20&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/graph-representation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/graph-representation/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;There are many different ways of representing graphs. Each has pros and cons attached to them. Main difference stems from compromising space for speed of lookup. For different applications you may either want instant lookup or conservative space use.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/graph/</guid>
      <description>&lt;p&gt;Graph is a main element of study in graph theory is the mathematical theory of the properties and applications of graphs (networks).&lt;/p&gt;&#xA;&lt;p&gt;Graph contains of vertices (nodes) and edges (links).&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/heap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/heap/</guid>
      <description>&lt;h1 id=&#34;heap&#34;&gt;Heap&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;A Heap is a special &lt;a href=&#34;Data%20Structure&#34;&gt;Data Structure&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Heap can hold:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;values&lt;/li&gt;&#xA;&lt;li&gt;key-value pairs that are stored based on &lt;strong&gt;value&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;two-types-of-heaps&#34;&gt;Two types of heaps:&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Max-Heap&lt;/strong&gt;: In a Max-Heap the key present at the root node must be greatest among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Tree.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Min-Heap&lt;/strong&gt;: In a Min-Heap the key present at the root node must be minimum among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Tree.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;operations-of-heap-data-structure&#34;&gt;Operations of Heap Data Structure&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Heapify:&lt;/strong&gt; a process of creating a heap from an array.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Insertion:&lt;/strong&gt; process to insert an element in existing heap time complexity O(log N).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Deletion:&lt;/strong&gt; deleting the top element of the heap or the highest priority element, and then organizing the heap and returning the element with time complexity O(log N).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Peek:&lt;/strong&gt; to check or find the most prior element in the heap, (max or min element for max and min heap).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;DecreaseKey&lt;/strong&gt;: decrease certain key value (but also preserves heap property after call)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;size&lt;/strong&gt;: checks how many elements there are&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;isEmpty&lt;/strong&gt;: checks if size property is equal to zero&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;&#xA;&lt;p&gt;It is often implemented as an &lt;a href=&#34;Array&#34;&gt;Array&lt;/a&gt; and visualised using a &lt;a href=&#34;Tree.md&#34;&gt;Tree&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/higher-order-derivatives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/higher-order-derivatives/</guid>
      <description>&lt;h2 id=&#34;higher-order-derivatives&#34;&gt;Higher order derivatives&lt;/h2&gt;&#xA;&lt;p&gt;Higher order derivatives are often referred to as &amp;ldquo;derivative of the derivative&amp;rdquo;. Note: there is no limit to how &amp;ldquo;deep&amp;rdquo; we can go, however we will at some point hit either a point where consecutive derivatives form a loop. Sometimes that loop is one constant like 0 or $e^x$ but it can also be $sin(x)$.&lt;/p&gt;&#xA;&lt;h3 id=&#34;notation&#34;&gt;Notation&lt;/h3&gt;&#xA;&lt;p&gt;For an order of derivative $n$ of single input function $f$ we note it as $\frac{d^nf}{dx^n}(x)$.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/homogenous-equations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/homogenous-equations/</guid>
      <description>&lt;p&gt;Given any ODE of the first order:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Let $y=vx$&lt;/li&gt;&#xA;&lt;li&gt;Differentiate both sides using product rule $$dy=x \cdot dv + v \cdot dx$$&lt;/li&gt;&#xA;&lt;li&gt;Substitute&lt;/li&gt;&#xA;&lt;li&gt;Simplify&lt;/li&gt;&#xA;&lt;li&gt;Separation of Variables&lt;/li&gt;&#xA;&lt;li&gt;Substitute back $v=\frac{x}{y}$&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/homogenous-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/homogenous-functions/</guid>
      <description>&lt;p&gt;#TODO&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/hyde-query-translation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/hyde-query-translation/</guid>
      <description>&lt;h1 id=&#34;hyde-query-translation&#34;&gt;HyDE query translation&lt;/h1&gt;&#xA;&lt;p&gt;Method related to &lt;a href=&#34;Query%20translation.md&#34;&gt;Query translation&lt;/a&gt; where you try to&#xA;improve the hitrate of &lt;a href=&#34;RAG.md&#34;&gt;RAG&lt;/a&gt; by generating the &lt;strong&gt;Hy&lt;/strong&gt;pothetical&#xA;&lt;strong&gt;D&lt;/strong&gt;ocument and then &lt;strong&gt;E&lt;/strong&gt;xtracting it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-would-this-work&#34;&gt;Why would this work?&lt;/h2&gt;&#xA;&lt;p&gt;Intuitively, we hope that this Hypothetical Document will be more closely related to the chunks we could find in the Indexed database, thus, we hope to find the chunks that are more closely related to the original question.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/idempotence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/idempotence/</guid>
      <description>&lt;h1 id=&#34;idempotence&#34;&gt;Idempotence&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Property of &lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt; and Computer Science that describes situation where multiple application is not changing result of initial one.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;Given a function $f$, and $x$ as a member of set $s$. Function f is idempotent if&#xA;$$f(f(x)) = f(x), \ \forall x \in S $$&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;In computer science we prefer to loosen the definition to &amp;ldquo;function $f$ returns same results after first call to $f$&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/identity-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/identity-function/</guid>
      <description>&lt;h1 id=&#34;identity-function&#34;&gt;Identity function&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Function accepting single argument and returning it as is. Part of &lt;a href=&#34;Function%20programming&#34;&gt;Function programming&lt;/a&gt; theory&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;p&gt;In JavaScript we note it as:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;identity&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;This is so simple, but surprisingly useful. Say we want to filter an array to not contain an empty quotes. Using &lt;a href=&#34;Filter%20pattern.md&#34;&gt;Filter pattern&lt;/a&gt; we may do:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Now&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;the&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;identity&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// [&amp;#34;Now&amp;#34;, &amp;#34;is&amp;#34;, &amp;#34;the&amp;#34;, &amp;#34;time&amp;#34;, &amp;#34;!&amp;#34;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another very useful trait is using it as a default parameter for predicate function in formatting functions:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/identity-matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/identity-matrix/</guid>
      <description>&lt;p&gt;A special &lt;a href=&#34;Matrix.md&#34;&gt;matrix&lt;/a&gt; that has zeros in the body and ones on the diagonal. It is denoted as $I$&#xA;Example:&#xA;$$I = \begin{bmatrix}&#xA;1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \&#xA;0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \&#xA;0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 \&#xA;0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1&#xA;\end{bmatrix}$$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/identity-relation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/identity-relation/</guid>
      <description>&lt;p&gt;One of &lt;a href=&#34;Relation%20in%20Mathematics.md&#34;&gt;Relation in Mathematics&lt;/a&gt;&#xA;In the identity relation, every element of A has a relation to itself only. The identity relation is described as follows: $A : A \rightarrow A$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/impedance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/impedance/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Impedance is a measure of the opposition that a circuit presents to the flow of alternating current (AC). It is a complex quantity, meaning that it has both magnitude and phase, and is typically denoted by the symbol &amp;ldquo;$Z$&amp;rdquo;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;The magnitude of impedance is related to the resistance of the circuit, while the phase is related to the reactance of the circuit. Impedance is important in electronic circuits because it determines the amount of current that will flow through the circuit, and thus the amount of power that can be delivered to a load. Impedance is typically measured in ohms, and is often used in conjunction with admittance (the reciprocal of impedance) to analyse and design AC circuits&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/implicit-differentiation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/implicit-differentiation/</guid>
      <description>&lt;h2 id=&#34;implicit-differentiation&#34;&gt;Implicit differentiation&lt;/h2&gt;&#xA;&lt;p&gt;For some equations we can&amp;rsquo;t write &amp;ldquo;simple&amp;rdquo; derivative equations with $\frac{dy}{dx}$. For example $x^2 + y^2 = 5^2$ describes a circle. We can however take steps that will make sense and will result in $\frac{dy}{dx}$. Those steps are:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Differentiate both sides with respect to both $x$ and $y$&#xA;$$\frac{d(x^2 + y^2)}{dx} + \frac{d(x^2 + y^2)}{dy} = 0$$&lt;/li&gt;&#xA;&lt;li&gt;Extract both derivatives&#xA;$$2x\cdot dx + 2y\cdot dy = 0$$&lt;/li&gt;&#xA;&lt;li&gt;Rearrange terms&#xA;$$\frac{dy}{dx} = -\frac{x}{y}$$&#xA;Note: this technique is very similar to the differentiation of multi-variable functions. in the example above the function output is constant but it doesn&amp;rsquo;t have to be.&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/inductor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/inductor/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;electronic%20circuit&#34;&gt;electronic circuit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;inductor&#34;&gt;Inductor&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221027204249.png&#34; alt=&#34;Pasted image 20221027204249&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/injective-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/injective-function/</guid>
      <description>&lt;p&gt;Type of &lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Also known as one-to-one function&lt;/p&gt;&#xA;&lt;p&gt;A function will be known as one-to-one if one element of the domain set is connected with the one element of a co-domain set. We can also write one to one as 1-1. In the one to one function, the answers never repeat.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/injective%20functions.png&#34; alt=&#34;injective functions&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/inner-product-matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/inner-product-matrix/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;An inner product matrix is a type of &lt;a href=&#34;Matrix.md&#34;&gt;Matrix&lt;/a&gt; that is used to represent the inner product (&lt;a href=&#34;Dot%20product.md&#34;&gt;Dot product&lt;/a&gt;) of two vectors.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;computation&#34;&gt;Computation&lt;/h2&gt;&#xA;&lt;p&gt;For a matrix $A$ and a result $B$ we calculate result using formula:&#xA;$$B=A{A}^T$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;An inner product matrix is a square matrix that is constructed by taking the inner product of a vector with itself. For example, if we have a vector &lt;code&gt;x&lt;/code&gt;, the inner product matrix of &lt;code&gt;x&lt;/code&gt; is a square matrix &lt;code&gt;A&lt;/code&gt; such that &lt;code&gt;A[i,j] = x[i] * x[j]&lt;/code&gt; for all indices &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;. In other words, the inner product matrix of a vector &lt;code&gt;x&lt;/code&gt; is a matrix where each element &lt;code&gt;A[i,j]&lt;/code&gt; is the product of the &lt;code&gt;i&lt;/code&gt;th and &lt;code&gt;j&lt;/code&gt;th elements of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/inspect-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/inspect-pattern/</guid>
      <description>&lt;h1 id=&#34;inspect-pattern&#34;&gt;Inspect pattern&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;We use inspect pattern to make &lt;a href=&#34;Debugging&#34;&gt;Debugging&lt;/a&gt; &lt;a href=&#34;Pipe%20pattern.md&#34;&gt;Pipe pattern&lt;/a&gt; easy.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;p&gt;Very basic program that prints consecutive variables to console.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inspect&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;tag&lt;/span&gt;) =&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) =&amp;gt; {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;&#xA;&lt;p&gt;Using pipe pattern is really nice but debugging it may be troublesome. Often, to debug code you have to break down the pipe into separate function calls. This defeats use of pipe all-together. However, use of inspect pattern can make it easy. Example provided &lt;a href=&#34;https://blog.bitsrc.io/functional-programming-composition-2e9b863d8bcb&#34;&gt;here&lt;/a&gt; but copied for easy, offline access:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/integral/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/integral/</guid>
      <description>&lt;p&gt;Table for the integrals : &lt;a href=&#34;../UNI/y2/EDDE-DifferentialMaths/Tables/IntegrationFormulas.pdf&#34;&gt;IntegrationFormulas&lt;/a&gt;&#xA;#TODO&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/integrating-factor-for-exact-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/integrating-factor-for-exact-method/</guid>
      <description>&lt;p&gt;First steps are the same as in &lt;a href=&#34;Exact%20method%20for%20solving%20ODEs.md&#34;&gt;Exact method for solving ODEs&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;if $Q_x-P_y \neq 0$ then we have to calculate the &lt;strong&gt;integrating factor&lt;/strong&gt; that will change our equation into form that will allow us to calculate the result with exact method.&lt;/p&gt;&#xA;&lt;p&gt;This integrating factor is $\mu$ and we use it like this:&#xA;For a original function $f(x,y) := P(x,y) dx + Q(x,y) dy = 0$&#xA;we transform it into&#xA;$f(x,y) := P(x,y)\mu dx + Q(x,y)\mu dy = 0$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/intro-sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/intro-sort/</guid>
      <description>&lt;p&gt;#TODO&#xA;MOST EFFICIENT SORTING ALGORITHM OUT THERE!!!&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/inverse-element/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/inverse-element/</guid>
      <description>&lt;p&gt;Let $X$ be non-empty set.&#xA;Let $\bigoplus$ be a binary operation defined $\forall a \in X$.&#xA;If $\exists x \in X \land x ^{-1} \in X$, such that $x \bigoplus x ^{-1} = x ^{-1} \bigoplus x = e$, where $e$ is a &lt;a href=&#34;Neutral%20Element.md&#34;&gt;Neutral Element&lt;/a&gt; and $x^{-1}$ is an inverse element.&lt;/p&gt;&#xA;&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;&#xA;&lt;p&gt;Let $\bigoplus$ be a binary operation defined $\forall a \in X$. This relation is described by: $x \bigoplus y = x + y - 2xy$&#xA;Neutral element, $e = 0$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/inverse-matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/inverse-matrix/</guid>
      <description>&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;Inverse of matrix $M$ is denoted as $M^{-1}$.&lt;/p&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Inverse of matrix $M$ is by definition such that $M^{-1}M=I$.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/inverse-relation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/inverse-relation/</guid>
      <description>&lt;p&gt;One of &lt;a href=&#34;Relation%20in%20Mathematics.md&#34;&gt;Relation in Mathematics&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Assume that there are two sets, set A and set B, and they have a relation from A to B. This relation will be described as $R \in A \times B$. The inverse relation will be obtained when we replace the first element of each pair with the second element in a set. The inverse relation is described as follows:&lt;/p&gt;&#xA;&lt;p&gt;$R^{-1} = {(b, a) : (a, b) ∈ R}$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/iterator-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/iterator-pattern/</guid>
      <description>&lt;h1 id=&#34;iterator-pattern&#34;&gt;Iterator pattern&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Iterators are used to access the elements of an aggregate object (like an &lt;a href=&#34;Array&#34;&gt;Array&lt;/a&gt;) sequentially without exposing its underlying representation.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;p&gt;See &lt;a href=&#34;Iterators%20in%20c++.md&#34;&gt;Iterators in c++&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/iterators-in-c&#43;&#43;/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/iterators-in-c&#43;&#43;/</guid>
      <description>&lt;p&gt;Topic is very well explained on the website downloaded here: &lt;a href=&#34;../extra/Writing%20a%20custom%20iterator%20in%20modern%20C++%20-%20Internal%20Pointers.html&#34;&gt;Writing a custom iterator in modern C++ - Internal Pointers&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/jk-flipflop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/jk-flipflop/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Flip-Flops&#34;&gt;Flip-Flops&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;jk-flipflop&#34;&gt;JK FlipFlop&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;A JK flip-flop (Jack-Kilby flip-flop) is a type of &lt;a href=&#34;electronic%20circuit&#34;&gt;electronic circuit&lt;/a&gt; that is used to store and manipulate &lt;a href=&#34;binary%20information&#34;&gt;binary information&lt;/a&gt;. It is a type of &lt;a href=&#34;bistable%20circuit&#34;&gt;bistable circuit&lt;/a&gt;, which means that it has two stable states that it can assume, and can be easily switched between those states in response to external inputs.&lt;/p&gt;&#xA;&lt;p&gt;A JK flip-flop is made up of two logic gates, typically an AND gate and an OR gate, and a pair of inverters. The inputs to the circuit are a J (set) input, a K (reset) input, and a clock (CLK) input, and the outputs are the Q and Q&amp;rsquo; (not Q) outputs. The Q and Q&amp;rsquo; outputs are the complements of each other, meaning that one is always the opposite of the other.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/kirchhoffs-current-law-kcl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/kirchhoffs-current-law-kcl/</guid>
      <description>&lt;h1 id=&#34;kirchhoffs-current-law-kcl&#34;&gt;Kirchhoff&amp;rsquo;s Current Law (KCL)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Given a node in &lt;a href=&#34;electronic%20circuit&#34;&gt;electronic circuit&lt;/a&gt; there is equal current flowing in and out of the node.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Given node like this:&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221026210358.png&#34; alt=&#34;200&#34;&gt;&#xA;We have to note that: $i_1, i_2, i_3,&amp;hellip;,i_n=0$.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/kirchhoffs-voltage-law-kvl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/kirchhoffs-voltage-law-kvl/</guid>
      <description>&lt;h1 id=&#34;kirchhoffs-voltage-law-kvl&#34;&gt;Kirchhoff&amp;rsquo;s Voltage Law (KVL)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;The voltage drop between any two nodes does not depend on the oriented path along which it is computed.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221027203930.png&#34; alt=&#34;Pasted image 20221027203930&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221027204009.png&#34; alt=&#34;Pasted image 20221027204009&#34;&gt;&#xA;Electric potentials (with respect to any point) of the circuit&amp;rsquo;s nodes are well defined.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Note]&#xA;The node with respect to which we measure electric potentials is called ground or earth.&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221026210728.png&#34; alt=&#34;Pasted image 20221026210728&#34;&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/linear-combination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/linear-combination/</guid>
      <description>&lt;p&gt;Result of addition of &lt;a href=&#34;Vector.md&#34;&gt;vectors&lt;/a&gt; multiplied by scalars.&lt;/p&gt;&#xA;&lt;p&gt;For example for 3 vectors: $\vec{v},\vec{w},\vec{u}$ and scalars $a,b,c$:&#xA;$\vec{R} = a * \vec{v} + b * \vec{w} + c * \vec{u}$&#xA;$\vec{R}$ is a set of all vectors that we can create using given vectors&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/linear-dependence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/linear-dependence/</guid>
      <description>&lt;p&gt;A property of a &lt;a href=&#34;Vector.md&#34;&gt;Vector&lt;/a&gt;.&#xA;Two vectors are linearly dependent if one sits at the &lt;a href=&#34;Span%20of%20vector%20space.md&#34;&gt;span&lt;/a&gt; of the other.&lt;/p&gt;&#xA;&lt;p&gt;Vectors that are linearly dependent are mutually redundant.&lt;/p&gt;&#xA;&lt;h3 id=&#34;notation&#34;&gt;Notation:&lt;/h3&gt;&#xA;&lt;p&gt;If $\vec{u}$ is dependent :&#xA;$$ \vec{u} = a * \vec{v} + b * \vec{w}$$&#xA;If $\vec{u}$ is independent :&#xA;$$ \vec{u} \neq a * \vec{v} + b * \vec{w}$$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/linear-differential-equations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/linear-differential-equations/</guid>
      <description>&lt;h1 id=&#34;linear-differential-equations&#34;&gt;Linear differential equations&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Given a function:&#xA;$$y&amp;rsquo; + P(x)y = Q(x)$$&#xA;Step 1: Calculate an integrating factor&#xA;$$I(x) = e^{\int P(x)dx}$$&#xA;Step 2: calculate general solution&#xA;$$y = \frac1{I(x)}\left[\int Q(x)I(x)dx\right]$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;&#xA;&lt;p&gt;Examples with no solutions attached are in &lt;a href=&#34;../UNI/y2/EDDE-DifferentialMaths/Lectures/edde03.pdf&#34;&gt;edde03&lt;/a&gt; in part 2&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/linear-transformation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/linear-transformation/</guid>
      <description>&lt;h1 id=&#34;linear-transformation&#34;&gt;Linear transformation&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Process of exploiting &lt;a href=&#34;Linear%20isomorphism&#34;&gt;Linear isomorphism&lt;/a&gt;. It&amp;rsquo;s a &lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt; that takes in a &lt;a href=&#34;Vector.md&#34;&gt;Vector&lt;/a&gt; and turns it into new vector.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;It is customary to describe linear transformation with a &lt;a href=&#34;Matrix.md&#34;&gt;matrix&lt;/a&gt;. Each column of matrix corresponds to change in values of &lt;a href=&#34;Unit%20Vector.md&#34;&gt;unit vectors&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Eg.&#xA;$$ M = \begin{bmatrix} 3 &amp;amp; 2 \ -2 &amp;amp; 1 \end{bmatrix} $$&#xA;M is a transformation matrix where $\vec{i}$ lands at $\begin{bmatrix} 3 \ -2 \end{bmatrix}$ and  $\vec{j}$ lands at $\begin{bmatrix} 2 \ 1 \end{bmatrix}$&#xA;So each column describes a change to consecutive unit vectors of space.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/llm-powered-personal-assistant---requirement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/llm-powered-personal-assistant---requirement/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;zettelkasten/LLM.md&#34;&gt;LLM&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;llm-powered-personal-assistant---requirements&#34;&gt;LLM powered Personal Assistant - requirements&lt;/h1&gt;&#xA;&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ability-to-easily-extend-available-knowledge-and-actions&#34;&gt;Ability to easily extend, available knowledge and actions&lt;/h3&gt;&#xA;&lt;p&gt;AI assistant has to be able to adapt to new requirements. Whether it is new&#xA;skills that need to be acquired or new knowledge to be learned or Interface&#xA;change is required, there needs to be an easy way to accommodate this change. It&#xA;has to be accepted that the project will be continuously adapted to suit the&#xA;ever changing environment user is put in.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/llm-transformer-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/llm-transformer-architecture/</guid>
      <description>&lt;h1 id=&#34;llm-transformer-architecture&#34;&gt;LLM Transformer architecture&lt;/h1&gt;&#xA;&lt;h2 id=&#34;what-are-the-parts-of-a-transformer&#34;&gt;What are the parts of a transformer?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Embeddings    (encode the token from text into a vector of numbers)&lt;/li&gt;&#xA;&lt;li&gt;loop n&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Attention (how the token relates to all the other tokens)&lt;/li&gt;&#xA;&lt;li&gt;MLPs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Unembedding   (decode the token from a vector into text)&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/llm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/llm/</guid>
      <description>&lt;h1 id=&#34;llms&#34;&gt;LLMs&lt;/h1&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;&#xA;&lt;p&gt;This will be based on &lt;a href=&#34;https://www.youtube.com/watch?v=zjkBMFhNj_g&#34;&gt;this&lt;/a&gt; video. It is a monologe presentation by&#xA;Andrzej Karpathy with title &amp;ldquo;The busy person&amp;rsquo;s guide to LLMs&amp;rdquo;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;what-is-a-large-language-model&#34;&gt;What is a Large Language Model?&lt;/h3&gt;&#xA;&lt;p&gt;In one of the presentations Andrzej Karpathy gave online, he states that the&#xA;process of training the LLM is best described as a compression of input data.&lt;/p&gt;&#xA;&lt;p&gt;Large Language Model itself is fully contained and represented by 2 files:&#xA;parameters file and code to execute the model. While both parts are often open&#xA;for anyone to inspect or verify and the code running the model is well&#xA;understood, it is the parameters that define the behaviour of the LLM.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/logic-circuits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/logic-circuits/</guid>
      <description>&lt;h1 id=&#34;logic-circuits&#34;&gt;Logic circuits&lt;/h1&gt;&#xA;&lt;p&gt;ICs in short&lt;/p&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Logic circuits are electronic circuits processing two valued signals. Their operation is described by logic functions (&lt;a href=&#34;Boolean%20Algebra.md&#34;&gt;Boolean Algebra&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;h3 id=&#34;elements&#34;&gt;Elements&lt;/h3&gt;&#xA;&lt;p&gt;$x$ - element of a set (scalar or vector)&#xA;$X$ - set of elements x&#xA;$x_i$ - $i^{th}$ element ot the vector $x$ ($x = {x_1,x_2,&amp;hellip;,x_i,&amp;hellip;x_n}$)&#xA;$x^j$ - $j^{th}$ element of set $X$&#xA;$X^k$ - $k^{th}$ subset of $X$&lt;/p&gt;&#xA;&lt;h3 id=&#34;symols&#34;&gt;Symols&lt;/h3&gt;&#xA;&lt;p&gt;$\bumpeq$ - non-contradictory&#xA;$\equiv$ - equivalent&#xA;$\cong$ - pseudoequivalent&#xA;$\approxeq$ - compatible&#xA;$\approx$ - Moore pseudocompatible&#xA;$\sim$ - Mealy pseudocompatible&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/logic-gates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/logic-gates/</guid>
      <description>&lt;p&gt;Basic building block of a digital circuit. It&amp;rsquo;s a simple &lt;a href=&#34;electronic%20circuit&#34;&gt;electronic circuit&lt;/a&gt; that performs a specific logical operation on one or more input signals and produces an output signal based on the inputs. There are several different types of logic gates, each of which performs a different logical operation.&lt;/p&gt;&#xA;&lt;p&gt;On the high level they can be treated as a special kind of &lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt; operating on basis of &lt;a href=&#34;Boolean%20Algebra.md&#34;&gt;Boolean Algebra&lt;/a&gt;. Logic gates are implementing &lt;a href=&#34;boolean&#34;&gt;boolean&lt;/a&gt; functions. Logic is done on &lt;a href=&#34;binary&#34;&gt;binary&lt;/a&gt; input and results in binary output.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/longest-path-on-dag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/longest-path-on-dag/</guid>
      <description>&lt;p&gt;Similarly as in &lt;a href=&#34;Single%20Source%20Shortest%20Path%20on%20DAG%20(SSSP).md&#34;&gt;Single Source Shortest Path on DAG (SSSP)&lt;/a&gt; this problem can be solved in $O(V+E)$ complexity.&lt;/p&gt;&#xA;&lt;p&gt;Trick here is to multiply all edge values by -1, then find the SSSP and then multiply the edge values by -1 again.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/low-link-values-in-a-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/low-link-values-in-a-graph/</guid>
      <description>&lt;h1 id=&#34;low-link-values-in-a-graph&#34;&gt;Low-link Values in a graph&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;A low-link values of a node is the lowest node id reachable from that node when doing &lt;a href=&#34;Depth%20First%20Search%20(DFS).md&#34;&gt;Depth First Search (DFS)&lt;/a&gt; (including itself).&lt;/p&gt;&#xA;&lt;p&gt;Using low-link Values in the graph can be used to find cycles in the &lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Important: if our low-link values are used to detect &lt;a href=&#34;Strongly%20Connected%20Component%20(SCC).md&#34;&gt;Strongly Connected Component (SCC)&lt;/a&gt; Then the result of the operation is dependent on the randomness of the starting position of DFS. Therefore we sometimes have to incorporate a set of values that we are exploring currently. This way we always get the same result each time.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/makefile-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/makefile-example/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CXX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clang&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CXXFLAGS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -Wall -std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c++20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DEBUG_FLAGS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -g -O0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PERF_FLAGS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -O3 -march&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;native&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SOURCES &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; main.cpp foo.cpp bar.cpp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OBJECTS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;SOURCES:.cpp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;.o&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TARGET &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;TARGET&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$(TARGET)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;OBJECTS&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;CXX&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;CXXFLAGS&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;OBJECTS&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; -o &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;TARGET&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;%.o&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; %.cpp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;CXX&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;CXXFLAGS&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; -c $&amp;lt; -o $@&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; CXXFLAGS += &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;DEBUG_FLAGS&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;TARGET&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;perf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; CXXFLAGS += &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PERF_FLAGS&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;perf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;TARGET&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;TARGET&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;./&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;TARGET&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;rm -f &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;OBJECTS&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;TARGET&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then to build:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# build all&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# just test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# just debug&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make debug&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# just perf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make perf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/many-to-one-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/many-to-one-function/</guid>
      <description>&lt;p&gt;Type of &lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;A function will be known as &lt;strong&gt;many to one&lt;/strong&gt; function if &lt;strong&gt;more than one element of a domain set is connected with the same element of a co-domain set&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;That means a &lt;strong&gt;single element of co-domain can have connection with more than one element of the domain&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The many to one function always &lt;strong&gt;contains repeated answers&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/map-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/map-pattern/</guid>
      <description>&lt;h1 id=&#34;map-pattern&#34;&gt;Map Pattern&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Also known as projection. Pattern of computation that applies a function to every element of given &lt;a href=&#34;Array&#34;&gt;Array&lt;/a&gt; to create new array. Often implemented to execute functions in &lt;a href=&#34;Parallel&#34;&gt;Parallel&lt;/a&gt; to make computation faster. Commonly used with other &lt;a href=&#34;Function%20programming&#34;&gt;Function programming&lt;/a&gt; patterns&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Standard signature for map definition is &lt;code&gt;map(fn, arr)&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example-in-python&#34;&gt;Example in python:&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;double&lt;/span&gt;(x): &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doubled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(double, arr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(list(doubled)) &lt;span style=&#34;color:#75715e&#34;&gt;# [0,2,4,...,18]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that in python we need to convert it to list as by default &lt;code&gt;map&lt;/code&gt; returns iterator.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/matrix-multiplication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/matrix-multiplication/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt;, commonly a &lt;a href=&#34;Linear%20transformation.md&#34;&gt;Linear transformation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;when-is-it-possible&#34;&gt;When is it possible?&lt;/h3&gt;&#xA;&lt;p&gt;Let $M_1, M_2$ be matrixes. Matrix multiplication $M_1 * M_2$ is only possible when number of &lt;strong&gt;columns (n) in $M_1$&lt;/strong&gt;  is equal to number of &lt;strong&gt;rows (m) in $M_2$&lt;/strong&gt;. Result is a matrix of size $M_{1_m} \times M_{2_n}$&lt;/p&gt;&#xA;&lt;h3 id=&#34;multiplication-with-scalar&#34;&gt;Multiplication with scalar&lt;/h3&gt;&#xA;&lt;p&gt;Each component is multiplied by the scalar.&#xA;Example:&#xA;Let $A$ be matrix and $x$ be a scalar. Result be is calculated as follows:&#xA;$$A = \begin{bmatrix} a &amp;amp; b \ c &amp;amp; d \end{bmatrix}$$&#xA;$$B = A*x = \begin{bmatrix} ax &amp;amp; bx \ cx &amp;amp; dx \end{bmatrix}$$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/matrix/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Matrix is a table of rows and columns containing data. Matrix is commonly used to describe linear transformations. We often build matrix with &lt;a href=&#34;Vector.md&#34;&gt;Vector&lt;/a&gt; as it&amp;rsquo;s column.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;Dimensions of matrix are often described with letters &lt;strong&gt;m&lt;/strong&gt; and &lt;strong&gt;n&lt;/strong&gt;. We often note matrix of size m, n.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;m stands for number of rows&lt;/li&gt;&#xA;&lt;li&gt;n stands for number of columns&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Example of 3x2 matrix:&#xA;$$M = \begin{bmatrix} 3 &amp;amp; 2 \ 2 &amp;amp; 4 \ 4 &amp;amp; 5 \end{bmatrix}$$&#xA;If we want to access specific element we use subscript notation and say the index of row and column. It&amp;rsquo;s common to use letter i to determine a row and j as column.&#xA;In general: $M_{i,j} = x$&#xA;Example:&#xA;For matrix $M$ above $M_{1,1} = 3$ and $M _{3,2} = 5$ . Notice it is 3,2 not 2,3. order of arguments matters.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/max-flow-on-a-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/max-flow-on-a-graph/</guid>
      <description>&lt;h1 id=&#34;max-flow-on-a-graph&#34;&gt;Max Flow on a graph&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Max flow problem can be defined by a question:&#xA;&lt;code&gt;With an infinite input source, how much &amp;quot;flow&amp;quot; can we push through the network given that each edge has a certain capacity?&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;To have a Max Flow chart you need to have a &lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt; that has a Start (S) and Sink (T)&lt;/p&gt;&#xA;&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;&#xA;&lt;p&gt;To find the maximum flow (and min-cut as a by product), the Ford-Fulkerson method repeatedly finds augmenting paths through the residual graph and augments the flow until no more augmenting can be found.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/maximum-cardinality-mathcing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/maximum-cardinality-mathcing/</guid>
      <description>&lt;p&gt;Generally we are interested in what&amp;rsquo;s called a Maximum Cardinality Bipartite Matching (MCBM).&#xA;This is when we&amp;rsquo;ve maximized the pairs that can be matched with each other.&#xA;There exists several applications such as matching candidates to jobs, chairs to desks etc.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Bipartite%20Graph.md&#34;&gt;Bipartite Graph&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/maximum-power-transfer-theorem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/maximum-power-transfer-theorem/</guid>
      <description>&lt;p&gt;Instantaneous power delivered to a one-port:&#xA;$$p(t) = i(t)u(t)$$&#xA;If this one-port is an element of &lt;a href=&#34;Alternating%20current%20(AC)&#34;&gt;Alternating current (AC)&lt;/a&gt; circuit then.&#xA;$$i(t) = I_mcos(\omega t+\phi_i)$$&#xA;$$u(t) = U_mcos(\omega t+\phi_u)$$&lt;/p&gt;&#xA;&lt;p&gt;$$p(t) = I_mU_m cos(ωt+φi) cos(ωt+φu) = \frac12 I_mU_m cos(φi − φu) + \frac12 I_mU_m cos(2ωt + φi + φu) $$&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Notice]&#xA;Pulsation of the alternating term is twice as big as the pulsation of signals i and u.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Mean power, which, in the context of AC circuits, is also called active power, is the mean value P of the instantaneous power.&#xA;$$P=\frac{1}{T} \int &lt;em&gt;{t=t&lt;/em&gt;{0}}^{t_{o}+T} p(t) , dt, T=\frac{2\pi}{\omega}$$&#xA;Hence then active power supplied to a one-port equals&#xA;$$P=\frac{1}{2}I_{m}u_{m}\cos(\phi_{i} - \phi_{u})$$&#xA;the mean value of the alternating component is zero. Mean power can ba expressed in terms of phasors $U$ and $I$ as $$P=\frac{1}{2} Re(U, \bar{I})$$&#xA;Maximum Power Transfer theorem. In the alternating current circuit the mean power transferred to the load does not exceed the available power $P_{avail}$ of the generator&#xA;$$P_{avail} = \frac{|E_{T}|^2 }{8 Re(Z_{T})}$$&#xA;More precisely, for the theorem to hold, we need to assume Re(ZT ) &amp;gt; 0, which in real circuits is always true.&#xA;The mean power transferred to the load can not exceed $P_{avail}$ given by the formula even if we allow the load to be constructed with arbitrary devices (e.g. sources).&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/memoization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/memoization/</guid>
      <description>&lt;p&gt;Optimisation technique that aims to speed up computer programs by storing the results of expensive function calls and returning those results when same input occurs.&lt;/p&gt;&#xA;&lt;p&gt;Functions that use memoization have to be deterministic! This means that same input will always return same output.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slow_compute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// normally this function is really slow. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// here just multiplication for easy example&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CASHED_RESULTS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;memoised_compute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CASHED_RESULTS&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CASHED_RESULTS&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slow_compute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;CASHED_RESULTS&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/minimum-spanning-tree-mst/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/minimum-spanning-tree-mst/</guid>
      <description>&lt;h1 id=&#34;minimum-spanning-tree-mst&#34;&gt;Minimum Spanning Tree (MST)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;On an &lt;a href=&#34;Undirected%20Graph.md&#34;&gt;Undirected Graph&lt;/a&gt; and &lt;a href=&#34;Weighted%20Graph.md&#34;&gt;Weighted Graph&lt;/a&gt;, a Minimum Spanning &lt;a href=&#34;Tree.md&#34;&gt;Tree&lt;/a&gt; is a subset of the edges in the graph which connects all vertices together (without creating any cycles) while minimizing the total cost.&lt;/p&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;h3 id=&#34;prims-algorithm&#34;&gt;Prim&amp;rsquo;s Algorithm&lt;/h3&gt;&#xA;&lt;p&gt;Good for dense graphs. Usually will work in $O(E\cdot log(E))$ but it can be optimized to $O(E\cdot log(V))$.&#xA;It is not easily parallelizable. Neither can do minimum spanning forest on disconnected graph.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/monad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/monad/</guid>
      <description>&lt;h1 id=&#34;monad&#34;&gt;Monad&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-quote&#34; data-lang=&#34;quote&#34;&gt;A monad is just a monoid in the category of endofunctors, what&amp;#39;s the problem?&#xA;- James Iry&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Following note is based on video by &amp;lsquo;Studying with Alex&amp;rsquo; &lt;a href=&#34;https://www.youtube.com/watch?v=C2w45qRc3aU&#34;&gt;here&lt;/a&gt;&#xA;Current state of the note is heavily based on practical application of the pattern rather than mathematical basis in &lt;a href=&#34;Category%20theory&#34;&gt;Category theory&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;general-properties&#34;&gt;General properties&lt;/h2&gt;&#xA;&lt;p&gt;Any Monad system has to have following structures implemented:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Wrapper Type&#xA;&lt;ul&gt;&#xA;&lt;li&gt;This is a type that we base our system on&lt;/li&gt;&#xA;&lt;li&gt;In Example it was &lt;code&gt;NumberWithLogs&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;commonly referred to as &lt;code&gt;object&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Wrap Function&#xA;&lt;ul&gt;&#xA;&lt;li&gt;allows transition into our Monad system&lt;/li&gt;&#xA;&lt;li&gt;In Example it was &lt;code&gt;wrapWithLogs&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;it is commonly referred to as &lt;code&gt;return, pure, unit&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Run Function&#xA;&lt;ul&gt;&#xA;&lt;li&gt;runs transformations on monadic values&lt;/li&gt;&#xA;&lt;li&gt;In Example it was &lt;code&gt;runWithLogs&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;commonly referred to as &lt;code&gt;bind, flatMap, &amp;gt;&amp;gt;=&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;He starts by providing example in TypeScript. Here I will rewrite to python as it is more familiar.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/naming-conventions-in-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/naming-conventions-in-code/</guid>
      <description>&lt;p&gt;Part of &lt;a href=&#34;Code%20quality&#34;&gt;Code quality&lt;/a&gt;&#xA;This note is inspired by video by CodeAesthetic&lt;img src=&#34;https://www.youtube.com/watch?v=-J3wNP6u5YU&#34; alt=&#34;here&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;He begins with a quote:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-quote&#34; data-lang=&#34;quote&#34;&gt;There are only tho hard things in computer science: cache invalidation and naming things.&#xD;&#xA;- Phil Karlton&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Main idea in his video is: you can get 80% of the way by &amp;ldquo;avoiding bad patterns&amp;rdquo;.&#xA;Main patterns to avoid:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Single letter variables. (I disagree for small scope names or convention like &amp;lsquo;i&amp;rsquo; for loops)&lt;/li&gt;&#xA;&lt;li&gt;Abbreviations in general&lt;/li&gt;&#xA;&lt;li&gt;Forcing future readers to know the context code has been built in&lt;/li&gt;&#xA;&lt;li&gt;Don&amp;rsquo;t put a type in the name, use types for it&lt;/li&gt;&#xA;&lt;li&gt;Don&amp;rsquo;t put type to a type (&amp;ldquo;I&amp;rdquo; prefix in C##)&lt;/li&gt;&#xA;&lt;li&gt;Do not use &amp;ldquo;Base&amp;rdquo; or &amp;ldquo;Abstract&amp;rdquo; to name classes. If you need good name for parent class but cant find it, rename the child instead and &amp;ldquo;over-specify&amp;rdquo; (example: if you have a truck and want to generalise it, use &amp;ldquo;Truck&amp;rdquo; and &amp;ldquo;TrailerTruck&amp;rdquo; instead of &amp;ldquo;BaseTruck&amp;rdquo; and &amp;ldquo;Truck&amp;rdquo;)&lt;/li&gt;&#xA;&lt;li&gt;Don&amp;rsquo;t create &amp;ldquo;Utils&amp;rdquo; or &amp;ldquo;Helper&amp;rdquo; code bundles. It maybe helpful to use create a specific classes and move functions to operate on that class.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Use:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/nand-gate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/nand-gate/</guid>
      <description>&lt;h1 id=&#34;nand-logic-gate&#34;&gt;NAND Logic gate&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Logic%20Gates.md&#34;&gt;Logic Gates&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;In math known as Shafer Stroke ( $\uparrow$ )&lt;/p&gt;&#xA;&lt;h3 id=&#34;truth-table&#34;&gt;Truth Table&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Truth%20Tables.md&#34;&gt;Truth Tables&lt;/a&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Q&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;symbol-representation&#34;&gt;Symbol Representation&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/NAND_GATE.png&#34; alt=&#34;400x200&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/network-devices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/network-devices/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/network-layer-1-devices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/network-layer-1-devices/</guid>
      <description>&lt;h1 id=&#34;analog-modem&#34;&gt;Analog modem&lt;/h1&gt;&#xA;&lt;p&gt;The word modem is derived from contracting modulator/demodulator.&#xA;Modems were&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/network-switch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/network-switch/</guid>
      <description>&lt;p&gt;A network switch is a &lt;a href=&#34;Network%20devices.md&#34;&gt;networking device&lt;/a&gt; that &lt;strong&gt;connects devices together&lt;/strong&gt; on a computer network by using packet switching to forward data to its destination. It works at the data link layer (layer 2) of the OSI model, and it is responsible for sending data only to the devices on the network that need to receive it. This allows the network to operate more efficiently and reduces the amount of traffic on the network.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/neutral-element/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/neutral-element/</guid>
      <description>&lt;p&gt;Also known as Identity Element&lt;/p&gt;&#xA;&lt;p&gt;Let X be non-empty set.&lt;/p&gt;&#xA;&lt;p&gt;Let $\bigoplus$ be a binary operation defined $\forall a \in X$&#xA;If there exists e such that $a \bigoplus e = e \bigoplus a = a$, then $e$ is the neutral element.&lt;/p&gt;&#xA;&lt;p&gt;Another words effect of binary operation with $e$ doesn&amp;rsquo;t affect $a$.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/newton-symbol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/newton-symbol/</guid>
      <description>&lt;h1 id=&#34;newton-symbol&#34;&gt;Newton Symbol&lt;/h1&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;$${n\choose k} = \frac{n!}{k!\times (n-k)!}$$&#xA;Where $!$ is a &lt;a href=&#34;Factorial%20function.md&#34;&gt;Factorial function&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/nor-gate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/nor-gate/</guid>
      <description>&lt;h1 id=&#34;nor-gate--land-&#34;&gt;NOR gate ( $\land$ )&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Logic%20Gates.md&#34;&gt;Logic Gates&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;truth-table&#34;&gt;Truth Table&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Truth%20Tables.md&#34;&gt;Truth Tables&lt;/a&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Q&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;symbol-representation&#34;&gt;Symbol Representation&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;NOR_GATE.png%20&#34; alt=&#34; 400x200&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/normalization-in-data-bases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/normalization-in-data-bases/</guid>
      <description>&lt;h1 id=&#34;normalization-in-data-bases&#34;&gt;Normalization in Data Bases&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Process of structuring a relational database in accordance with a series of so-called &lt;strong&gt;normal forms&lt;/strong&gt; in order to reduce data redundancy and improve data integrity.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;For consecutive levels of normalization we will note then as:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1 NF&lt;/li&gt;&#xA;&lt;li&gt;2 NF&lt;/li&gt;&#xA;&lt;li&gt;3 NF&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&#xA;NF stands for Normal Form.&#xA;Each level of normal form has additional rules that need to be followed on top of previous ones&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;normal-forms-rules&#34;&gt;Normal Forms rules&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-nf&#34;&gt;1 NF&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Using row order to convey information is not permitted&lt;/li&gt;&#xA;&lt;li&gt;Mixing data types within the same column is not permitted&lt;/li&gt;&#xA;&lt;li&gt;Primary key is obligatory&lt;/li&gt;&#xA;&lt;li&gt;Repeating groups are not permitted&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-nf&#34;&gt;2 NF&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Informally: Each non-key attribute must depend on the entire primary key&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-nf&#34;&gt;3 NF&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;No dependency of attributes is allowed in single row&#xA;Every attribute in a table should depend on the key, whole key and nothing but the key.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4-nf&#34;&gt;4 NF&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Multi-valued dependencies in a table must be multi-valued based on key&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5-nf&#34;&gt;5 NF&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Any table cannot be a result of joining other tables together&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Normalization and normal forms cannot prevent us from providing wrong data, but will protect us against data that logically makes no sense. Ideas like multiple dates of birth for one person. Errors like that are called &amp;ldquo;failure of data integrity&amp;rdquo; as data disagrees with itself.&#xA;This normalization can be divided into multiple levels of &amp;ldquo;security&amp;rdquo; such that each consecutive level is even more strict on what can be done in such model.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/not-gate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/not-gate/</guid>
      <description>&lt;h1 id=&#34;not-gate--lnot-&#34;&gt;NOT gate ( $\lnot$ )&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Logic%20Gates.md&#34;&gt;Logic Gates&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;truth-table&#34;&gt;Truth Table&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Truth%20Tables.md&#34;&gt;Truth Tables&lt;/a&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;math-representation&#34;&gt;Math Representation&lt;/h3&gt;&#xA;&lt;p&gt;r = 1-p&lt;/p&gt;&#xA;&lt;h3 id=&#34;symbol-representation&#34;&gt;Symbol Representation&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/NOT_GATE.png&#34; alt=&#34;400x200&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/number-e/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/number-e/</guid>
      <description>&lt;p&gt;Special case of &lt;a href=&#34;Exponential%20functions.md&#34;&gt;Exponential functions&lt;/a&gt;. Also known as Euler Number.&lt;/p&gt;&#xA;&lt;p&gt;number $e$ is a special number for which $\lim_{dx \rightarrow 0}\frac{e^{dx}-1}{dx} = 1$&#xA;also defined by &lt;a href=&#34;Exp(x)%20function.md&#34;&gt;Exp(x) function&lt;/a&gt; and $\lim_{n\rightarrow \infty} (1 + \frac{1}{n})^n$&lt;/p&gt;&#xA;&lt;p&gt;Often used in &lt;a href=&#34;Differential%20equations.md&#34;&gt;Differential equations&lt;/a&gt; where &lt;strong&gt;rate of change (derivative) is proportional to the value at that point&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;properties&#34;&gt;Properties&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Any number $n$ can be written as $e^{ln(n)}$&lt;/li&gt;&#xA;&lt;li&gt;Derivative of $e^x = e^x$&lt;/li&gt;&#xA;&lt;li&gt;Derivative $\frac{df}{dt}$ of $e^{cx}$ is equal to $c\cdot e^{cx}$ due to chain rule&lt;/li&gt;&#xA;&lt;li&gt;Slope of a graph $y=e^x$ at any point $x$ is equal to $e^x$&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/numerical-representation-for-text-search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/numerical-representation-for-text-search/</guid>
      <description>&lt;h1 id=&#34;numerical-representation-for-text-search&#34;&gt;Numerical representation for text search&lt;/h1&gt;&#xA;&lt;p&gt;Normally, the lookup for the text relevant to a question would be done as in&#xA;&lt;a href=&#34;Document%20loading%20in%20RAG.md&#34;&gt;Document loading in RAG&lt;/a&gt;. However, this way&#xA;is slow and we can easily optimise it with &lt;a href=&#34;Indexing.md&#34;&gt;indexing&lt;/a&gt;. To do this, we parse the data inside the documents and represent the content numerical for easier lookup.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020240701205614.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-different-methods-of-numerical-representation&#34;&gt;What are different methods of numerical representation?&lt;/h2&gt;&#xA;&lt;p&gt;Basically, there is a division into deterministic &amp;ldquo;statistical&amp;rdquo; methods and &amp;ldquo;machine learned&amp;rdquo; methods&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/omega-notation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/omega-notation/</guid>
      <description>&lt;p&gt;In computer science we use omega notation to check what is the minimum number of actions that need to be taken in order to perform some task.&#xA;Often used with &lt;a href=&#34;Big%20O%20notation.md&#34;&gt;Big O notation&lt;/a&gt; to describe how algorithm performs now and what it could theoretically do.&lt;/p&gt;&#xA;&lt;p&gt;Example:&#xA;addition has scale of $\Omega(n)$ because at least you have to calculate each digit&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/open-systems-interconnection-osi-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/open-systems-interconnection-osi-model/</guid>
      <description>&lt;p&gt;OSI model was developed as a way to help disparate computing systems communicate with each other.&#xA;Most devices function at more than one level of the OSI model. When time comes to determine where they fit into the model, you must first determine the highest level at which they operate. To do that, you must know what they do.&lt;/p&gt;&#xA;&lt;p&gt;Layers of OSI reference model:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Network%20Layer%201%20devices.md&#34;&gt;Physical&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Data link&lt;/li&gt;&#xA;&lt;li&gt;Network&lt;/li&gt;&#xA;&lt;li&gt;Transport&lt;/li&gt;&#xA;&lt;li&gt;Session&lt;/li&gt;&#xA;&lt;li&gt;Presentation&lt;/li&gt;&#xA;&lt;li&gt;Application&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/opencl-simple-program/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/opencl-simple-program/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;CL/cl.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ARRAY_SIZE 100000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Create an OpenCL context and other necessary objects&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  cl_context context;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cl_command_queue queue;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cl_device_id device;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Initialize the context, queue, and device...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Create the array to store the result&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; result[ARRAY_SIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Create a compute program from the source code&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__kernel void compute(__global float* result, float scalar) {&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  int gid = get_global_id(0);&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  result[gid] = scalar + gid;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cl_program program &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clCreateProgramWithSource(context, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;source, NULL, NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  clBuildProgram(program, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NULL, NULL, NULL, NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Create a compute kernel from the program&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  cl_kernel kernel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clCreateKernel(program, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;compute&amp;#34;&lt;/span&gt;, NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Set the kernel arguments&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  clSetKernelArg(kernel, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cl_mem), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;result);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  clSetKernelArg(kernel, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;scalar);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Create a command queue to hold the commands for the computation&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  cl_command_queue cmdQueue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clCreateCommandQueue(context, device, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Enqueue the kernel for execution&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  size_t globalSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ARRAY_SIZE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Set the scalar value for the current iteration&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; scalar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0f&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Enqueue the kernel for execution&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    clEnqueueNDRangeKernel(cmdQueue, kernel, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, NULL, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;globalSize, NULL, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NULL, NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Read the result from the device&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  clEnqueueReadBuffer(cmdQueue, result, CL_TRUE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(result), result, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NULL, NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Clean up the resources&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  clReleaseMemObject(result);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  clReleaseKernel(kernel);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  clReleaseProgram(program);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  clReleaseCommandQueue(cmdQueue);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  clReleaseContext(context);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This program creates a buffer and does some computation on it. In general &lt;a href=&#34;OpenCL&#34;&gt;OpenCL&lt;/a&gt; is used as a high level API for &lt;a href=&#34;graphics%20programming&#34;&gt;graphics programming&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/opengl-hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/opengl-hello-world/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;GL/glut.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glClear(GL_COLOR_BUFFER_BIT);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glBegin(GL_TRIANGLES);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glColor3f(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glVertex2f(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glColor3f(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glVertex2f(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glColor3f(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glVertex2f(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glEnd();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glutSwapBuffers();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; argv) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glutInit(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;argc, argv);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glutInitDisplayMode(GLUT_RGBA &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; GLUT_DOUBLE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glutInitWindowSize(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glutCreateWindow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glutDisplayFunc(display);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glutMainLoop();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code can be used as a hello world example for &lt;a href=&#34;OpenGL&#34;&gt;OpenGL&lt;/a&gt; app. &lt;a href=&#34;graphics%20programming&#34;&gt;graphics programming&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/optimization-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/optimization-workflow/</guid>
      <description>&lt;h1 id=&#34;optimization&#34;&gt;Optimization&lt;/h1&gt;&#xA;&lt;h2 id=&#34;steps-to-optimize-your-code&#34;&gt;Steps to optimize your code&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Determine if your code needs optimization&#xA;The most important step in optimizing your code is to know if you need to. Remember: code optimization often makes it harder to read or develop your code. Also: Know what you are optimizing for!&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Make sure that optimization is worth the trouble!&#xA;When you determined that optimizations is needed make sure it is worth it! Sometimes the effort is so big you might just as well suffer a bit and wait just a bit longer&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/or-gate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/or-gate/</guid>
      <description>&lt;h1 id=&#34;or-gate--lor-&#34;&gt;OR gate ( $\lor$ )&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Logic%20Gates.md&#34;&gt;Logic Gates&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;truth-table&#34;&gt;Truth Table&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Truth%20Tables.md&#34;&gt;Truth Tables&lt;/a&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Q&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;math-representation&#34;&gt;Math Representation&lt;/h3&gt;&#xA;&lt;p&gt;r =  p+q-pq&lt;/p&gt;&#xA;&lt;h3 id=&#34;symbol-representation&#34;&gt;Symbol Representation&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;OR_GATE.png%20&#34; alt=&#34; 400x200&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Associative%20binary%20property.md&#34;&gt;Associative binary property&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Communicative%20binary%20property.md&#34;&gt;Communicative binary property&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Distributive%20binary%20property.md&#34;&gt;Distributive binary property&lt;/a&gt; with &lt;a href=&#34;AND%20gate.md&#34;&gt;AND gate&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;Absorptive%20property.md&#34;&gt;Absorptive property&lt;/a&gt; with &lt;a href=&#34;AND%20gate.md&#34;&gt;AND gate&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/parallel-computation-in-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/parallel-computation-in-python/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Python&#34;&gt;Python&lt;/a&gt;&#xA;&lt;a href=&#34;Parallel%20computing&#34;&gt;Parallel computing&lt;/a&gt;&#xA;&lt;a href=&#34;Steps%20to%20multiprocessing%20in%20Python.md&#34;&gt;Steps to multiprocessing in Python&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;There are a couple of ways to speed python up. One of them is to use parallel computing. This also splits into multiple branches. Primarily: are you compute or IO bound? If IO bound then &lt;code&gt;asyncio&lt;/code&gt; or threading might be a solution. However if you are compute bound then use code like below.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; multiprocessing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Pool&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_function&lt;/span&gt;(arg):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chunksize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; Pool() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pool:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pool&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;imap_unordered(compute_function, args, chunksize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;chunksize)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Remember]&#xA;You can also use optional &lt;code&gt;chunksize&lt;/code&gt; parameter to allow worked to get more work at a time thus reducing the overhead. This can lead to memory shortage though so just try to optimise it for your specific need.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/parallel-connections-equivalents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/parallel-connections-equivalents/</guid>
      <description>&lt;h1 id=&#34;parallel-connections-of-one-ports&#34;&gt;Parallel connections of one-ports&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221028110121.png&#34; alt=&#34;Pasted image 20221028110121&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221028110135.png&#34; alt=&#34;Pasted image 20221028110135&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221028110150.png&#34; alt=&#34;Pasted image 20221028110150&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221028110203.png&#34; alt=&#34;Pasted image 20221028110203&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221028110220.png&#34; alt=&#34;Pasted image 20221028110220&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221028110236.png&#34; alt=&#34;Pasted image 20221028110236&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/partial-derivatives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/partial-derivatives/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Derivative.md&#34;&gt;Derivative&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Derivative of &lt;a href=&#34;multi-variable%20function&#34;&gt;multi-variable function&lt;/a&gt; in specyfic direction.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/partial-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/partial-pattern/</guid>
      <description>&lt;h1 id=&#34;apply-pattern&#34;&gt;Apply pattern&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Pattern that allows us to supply fewer arguments then necessary to the function. Part of a &lt;a href=&#34;Function%20programming&#34;&gt;Function programming&lt;/a&gt; theory.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;partial&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;, ...&lt;span style=&#34;color:#a6e22e&#34;&gt;presentArgs&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;partialFn&lt;/span&gt;(...&lt;span style=&#34;color:#a6e22e&#34;&gt;laterArr&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;( ...&lt;span style=&#34;color:#a6e22e&#34;&gt;laterArr&lt;/span&gt; );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;Partial application is very useful in many situations. In general we will use it most often when we get some arguments now and some later. Then instead of passing arguments deeper into function stack calls, we create a partial function to be executed when rest of arguments are supplied.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/phasor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/phasor/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;A phasor is a &lt;a href=&#34;Complex%20number.md&#34;&gt;Complex number&lt;/a&gt; representing a sinusoidal function.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;It is often used in electrical engineering to represent the magnitude and phase of an &lt;a href=&#34;Alternating%20current%20(AC)&#34;&gt;Alternating current (AC)&lt;/a&gt; or voltage in a &lt;a href=&#34;electronic%20circuit&#34;&gt;electronic circuit&lt;/a&gt;. A phasor can be thought of as a vector in the &lt;a href=&#34;Complex%20plane.md&#34;&gt;Complex plane&lt;/a&gt;, with its magnitude representing the amplitude of the sinusoidal function and its phase representing the shift in time of the function relative to a reference. Phasors can be added and multiplied, and are useful for analyzing and solving problems involving sinusoidal signals.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/physically-based-rendering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/physically-based-rendering/</guid>
      <description>&lt;p&gt;Physically-based rendering (PBR) is a rendering technique that aims to simulate the physical interactions of light and materials in a scene as accurately as possible. This is achieved by using realistic models of light transport and material properties, based on the laws of physics, to calculate how light should behave when it hits different surfaces in the scene.&lt;/p&gt;&#xA;&lt;p&gt;PBR simulates the behavior of light in the real world, including how it reflects off different surfaces, how it scatters through the air, and how it is absorbed and emitted by materials. This allows PBR to create more realistic and believable images than traditional rendering techniques, which often use simplifications and approximations to make the rendering process more efficient.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/pipe-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/pipe-pattern/</guid>
      <description>&lt;h1 id=&#34;pipe-pattern&#34;&gt;Pipe pattern&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Pipe pattern is a way of creating a solution to a complex problem by using already defined, small functions and use their outputs as inputs for next functions.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Similar to &lt;a href=&#34;Compose%20pattern.md&#34;&gt;Compose pattern&lt;/a&gt;. The order of arguments, however is reversed to get more natural left to right implementation&lt;/p&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;p&gt;We can use &lt;a href=&#34;Reduce%20pattern.md&#34;&gt;Reduce pattern&lt;/a&gt; to create pipes:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (...&lt;span style=&#34;color:#a6e22e&#34;&gt;fns&lt;/span&gt;) =&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;acc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;acc&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and use it like:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doubleInt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;piped&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;doubleInt&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;piped&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// result = (5 + 2) * 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/plain-text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/plain-text/</guid>
      <description>&lt;h1 id=&#34;plain-text&#34;&gt;Plain text&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Text of a message or information we want to send/preserve.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;To note consecutive letters/blocks in the plaintext we often use ${M_{1}, M_{2}, M_{3}, \dots, M_{n}}$&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Plaintext is often referred to as &lt;em&gt;message&lt;/em&gt;.&#xA;In &lt;a href=&#34;Cryptography&#34;&gt;Cryptography&lt;/a&gt; plaintext is an original message that needs to be secured using &lt;a href=&#34;Encryption.md&#34;&gt;Encryption&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/power-dc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/power-dc/</guid>
      <description>&lt;h1 id=&#34;power&#34;&gt;Power&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221127220449.png&#34; alt=&#34;Pasted image 20221127220449&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/priorityqueue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/priorityqueue/</guid>
      <description>&lt;h1 id=&#34;priority-queue&#34;&gt;Priority Queue&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Priority Queue is a abstract data-type that has &lt;code&gt;priority&lt;/code&gt; argument attached to every element. When dequeuing elements we receive them in either ascending or descending order depending on priority they were added in. In case of the same priority we usually default ro regular &lt;a href=&#34;Queue.md&#34;&gt;Queue&lt;/a&gt; standard.&lt;/p&gt;&#xA;&lt;h2 id=&#34;implementations&#34;&gt;Implementations&lt;/h2&gt;&#xA;&lt;p&gt;Most basic implementations often use &lt;a href=&#34;Heap.md&#34;&gt;Heap&lt;/a&gt; as a solution. Those work but are often quite inefficient (not as efficient as they could be).&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/probability-vs-statistics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/probability-vs-statistics/</guid>
      <description>&lt;h1 id=&#34;probability-vs-statistics&#34;&gt;Probability vs Statistics&lt;/h1&gt;&#xA;&lt;p&gt;Probability measures how likely certain event is. Statistics measure how certain we are of how probable are events.&lt;/p&gt;&#xA;&lt;p&gt;In other words we can deduce probability with statistics.&lt;/p&gt;&#xA;&lt;h2 id=&#34;related&#34;&gt;Related&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Probability.md&#34;&gt;Probability&lt;/a&gt;&#xA;&lt;a href=&#34;Statistics.md&#34;&gt;Statistics&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/probability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/probability/</guid>
      <description>&lt;h1 id=&#34;probability&#34;&gt;Probability&lt;/h1&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;We can treat probability as an extension of Logic. In Logic we deal with values like &amp;ldquo;true&amp;rdquo; or &amp;ldquo;false&amp;rdquo;. Those are useful but often in life we are dealing with some sort of uncertainty. To express this uncertainty we can use values between 0 and 1, where 0 means something is false (and so will not happen) and 1 means something is always true (and will always happen).&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/project-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/project-workflow/</guid>
      <description>&lt;p&gt;General project workflow that involves multiple contributors:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Project leader must first research the topic of the project thoroughly.&lt;/li&gt;&#xA;&lt;li&gt;The project leader creates a project plan and assigns tasks to each contributor.&lt;/li&gt;&#xA;&lt;li&gt;Leader also needs to establish means of communication and work documentation as well as version control system.&lt;/li&gt;&#xA;&lt;li&gt;Each contributor is responsible for completing their assigned tasks according to the project plan.&lt;/li&gt;&#xA;&lt;li&gt;As contributors complete their tasks, they document their progress into a shared version control system.&lt;/li&gt;&#xA;&lt;li&gt;The project leader manages progress of team members and controls merges into the main branch of the project. He has to ensure that everyone is working off of the latest version.&lt;/li&gt;&#xA;&lt;li&gt;This process continues until all tasks are completed and the project is ready for final review and delivery.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Of all points point 3. is perhaps the most important. Ideally every team member should be easily replaceable based on the fact that his work status is clear and other people know exactly what to do and how.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/prompt-engineering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/prompt-engineering/</guid>
      <description>&lt;p&gt;interesting idea against prompt engineering:&#xA;&lt;a href=&#34;https://www.removepaywall.com/search?url=https://medium.com/aiguys/prompt-engineering-is-dead-dspy-is-new-paradigm-for-prompting-c80ba3fc4896&#34;&gt;link&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;prompt-engineering&#34;&gt;Prompt engineering&lt;/h1&gt;&#xA;&lt;p&gt;Prompt engineering is just a way to maximise the efectiveness of the&#xA;&lt;a href=&#34;zettelkasten/LLM.md&#34;&gt;LLM&lt;/a&gt;. Often times, queries from user are short, inacurate, stripped of context.&#xA;Before passing the user query to the LLM, we could use some rules that will&#xA;rewrite the query to one that will yield better result.&lt;/p&gt;&#xA;&lt;p&gt;Common techniques:&lt;/p&gt;&#xA;&lt;p&gt;Provide context to the query&#xA;&amp;ldquo;Explain reasoning first, answer at the end&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;But also system prompts can be used to define behaviour.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/proportional-form-of-bayes-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/proportional-form-of-bayes-rule/</guid>
      <description>&lt;h1 id=&#34;proportional-form-of-bayes-rule&#34;&gt;Proportional form of Bayes Rule&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Simplified form of &lt;a href=&#34;Bayes%20rule.md&#34;&gt;Bayes rule&lt;/a&gt;. It leaves out the proportionality factor of $\frac1{P(D)}$. Therefore the values of this form are not normalised between 0-1.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;$$P(H|D)\propto P(H)\times P(D|H)$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;It is often very difficult to know the precise value of $P(D)$. Often however we do not need the precise value and we just need to compare how well different hypothesis explain the data we see. Therefore if we try $\frac{P(H_1|D)}{P(H_2|D)}$ then fraction of $\frac1{P(D)}$ can be simplified out of the equation.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/proposition-indexing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/proposition-indexing/</guid>
      <description>&lt;p&gt;Proposition &lt;a href=&#34;Indexing&#34;&gt;Indexing&lt;/a&gt; is used in order to optimise&#xA;&lt;a href=&#34;Retrieval%20of%20relevant%20documents.md&#34;&gt;Retrieval of relevant documents&lt;/a&gt;.&#xA;Basically, we use &lt;a href=&#34;LLM.md&#34;&gt;LLM&lt;/a&gt; to summarise the entire document and then embed the&#xA;summary. After that we &lt;a href=&#34;Embedding.md&#34;&gt;embed&lt;/a&gt; the Original question and then&#xA;return entire document instead of document chunks.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/pulays-algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/pulays-algorithm/</guid>
      <description>&lt;p&gt;Pulay&amp;rsquo;s algorithm is a method for accelerating the convergence of the &lt;a href=&#34;self-consistent%20field%20(SCF)&#34;&gt;self-consistent field (SCF)&lt;/a&gt; iteration in &lt;a href=&#34;density%20functional%20theory%20(DFT)&#34;&gt;density functional theory (DFT)&lt;/a&gt; calculations. It was developed by Peter Pulay in 1980.&lt;/p&gt;&#xA;&lt;p&gt;The basic idea behind Pulay&amp;rsquo;s algorithm is to incorporate information from previous SCF iterations into the current iteration in order to improve the convergence rate. This is done by adding a correction term to the &lt;a href=&#34;Fock%20matrix.md&#34;&gt;Fock matrix&lt;/a&gt;, which is used to update the electronic density and the potential in each SCF iteration. The correction term is constructed from the difference between the electronic density from the current iteration and the density from the previous iteration.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/pumping-lemma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/pumping-lemma/</guid>
      <description>&lt;p&gt;[[ELAC]]&lt;/p&gt;&#xA;&lt;h1 id=&#34;pumping-lemma&#34;&gt;Pumping lemma&lt;/h1&gt;&#xA;&lt;p&gt;The word lemma in mathematics refers to &amp;ldquo;mini theorem&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;Pumping lemma states that if a language is regular then every string in that language has a substring that can be repeated (pumped) however many times and still be in the language.&lt;/p&gt;&#xA;&lt;p&gt;More formally&#xA;All strings in the language can be repeated (pumped) if they are at least as long as a certain length (pumping length p, usually number of states in DFA)&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/pure-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/pure-function/</guid>
      <description>&lt;h1 id=&#34;pure-function&#34;&gt;Pure function&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Function with no side-effects.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Pure function is a perfect function in terms of &lt;a href=&#34;Function%20programming&#34;&gt;Function programming&lt;/a&gt; as it has no side-effects.&#xA;Every such function is &lt;a href=&#34;Idempotence.md&#34;&gt;idempotent&lt;/a&gt; in programming sense but not all are idempotent in pure mathematical way (although there may be many examples including &lt;code&gt;unary&lt;/code&gt; function pattern).&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Note]&#xA;In many cases pure functions can be optimised by memorising the result of computation via &lt;a href=&#34;Memoization.md&#34;&gt;Memoization&lt;/a&gt; or &lt;a href=&#34;Tabulation.md&#34;&gt;Tabulation&lt;/a&gt;. Since $x$ always results in $y$ we can think of it as a simple map function. Be careful not no memorise calls to cheap functions as memory lookup can be more expensive than maths operations for example.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/quantum-computing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/quantum-computing/</guid>
      <description>&lt;p&gt;note taken based on &lt;a href=&#34;https://www.youtube.com/watch?v=F_Riqjdh2oM&#34;&gt;this&lt;/a&gt; youtube&#xA;video.&lt;/p&gt;&#xA;&lt;h1 id=&#34;representing-classical-bits-as-a-vector&#34;&gt;Representing classical bits as a vector&lt;/h1&gt;&#xA;&lt;p&gt;From now on, a classical bit will be written as cbit or &amp;lsquo;regular bit&amp;rsquo;&lt;/p&gt;&#xA;&lt;p&gt;One bit with value 0, also written as $|0\rangle$ (&lt;a href=&#34;Dirac%20vector%20notation&#34;&gt;Dirac vector notation&lt;/a&gt;)&#xA;$$1\choose 0$$&lt;/p&gt;&#xA;&lt;p&gt;One bit with value 1, also written as $|1\rangle$&#xA;$$0\choose 1$$&lt;/p&gt;&#xA;&lt;p&gt;When we have this defined, we can use &lt;a href=&#34;Matrix%20multiplication.md&#34;&gt;Matrix multiplication&lt;/a&gt; rules to&#xA;manipulate the bits. Those transformations will take form of Functions.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/query-translation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/query-translation/</guid>
      <description>&lt;h1 id=&#34;query-translation&#34;&gt;Query translation&lt;/h1&gt;&#xA;&lt;p&gt;Simply put, sometimes the queries to LLM may be incomplete, miss context or&#xA;detail. One way of improving the &lt;a href=&#34;zettelkasten/Prompt%20engineering.md&#34;&gt;Prompt engineering&lt;/a&gt; is&#xA;to use LLM to interpret the question and rewrite it in such a way that will be&#xA;more detailed and with context. One common way is to generate more queries that&#xA;will enhance the hitrate of relevant documents in our database.&lt;/p&gt;&#xA;&lt;p&gt;Once the questions are translated, the problem can be split into a couple of related problems. Now each of the sub-problems can be solved separately or we could build solution of the most specific problem by combining the result of any sub-problem that was a part of the original question.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/queue/</guid>
      <description>&lt;h1 id=&#34;queue&#34;&gt;Queue&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Queue is an insanely powerful &lt;a href=&#34;Data%20Structure&#34;&gt;Data Structure&lt;/a&gt;. It operates on basis of FIFO meaning that element that was pushed last will be used last.&lt;/p&gt;&#xA;&lt;h2 id=&#34;associated-functions&#34;&gt;Associated Functions&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;enqueue - add element to queue&lt;/li&gt;&#xA;&lt;li&gt;dequeue - get element from queue&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Imagine stack as a drawer with documents. If you put some documents ABCD in the drawer you can only take them out in DCBA order.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/rag-response-generation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/rag-response-generation/</guid>
      <description>&lt;h1 id=&#34;rag-response-generation&#34;&gt;RAG response generation&lt;/h1&gt;&#xA;&lt;p&gt;Last step of &lt;a href=&#34;RAG.md&#34;&gt;RAG&lt;/a&gt;. Once you have &lt;a href=&#34;Retrieval%20of%20relevant%20documents.md&#34;&gt;retrieved relevant documents&lt;/a&gt;, you want to build a prompt to the LLM such that the response from it is based in actual real nformation.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/rag-routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/rag-routing/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;zettelkasten/RAG.md&#34;&gt;RAG&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;rag-routing&#34;&gt;RAG routing&lt;/h1&gt;&#xA;&lt;p&gt;Given a set of data collection descriptors like [&amp;ldquo;python docs&amp;rdquo;, &amp;ldquo;js docs&amp;rdquo;, &amp;ldquo;go&#xA;docs&amp;rdquo;] we hope to first ask the LLM what descriptor will be needed to answer&#xA;the original question.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-would-we-do-it&#34;&gt;Why would we do it?&lt;/h2&gt;&#xA;&lt;p&gt;There are several reasons:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Performance&lt;/li&gt;&#xA;&lt;li&gt;Data separation&lt;/li&gt;&#xA;&lt;li&gt;Limit irrelevant but seemingly related answers&lt;/li&gt;&#xA;&lt;li&gt;Tailoring the response based on the field&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;performance&#34;&gt;Performance&lt;/h3&gt;&#xA;&lt;p&gt;For massive datasets it may be faster to call the LLM the question rather than to perform &lt;a href=&#34;Retrieval%20of%20relevant%20documents.md&#34;&gt;Retrieval of relevant documents&lt;/a&gt; and perform expensive search through entire set.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/rag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/rag/</guid>
      <description>&lt;h1 id=&#34;rag&#34;&gt;RAG&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;RAG&lt;/strong&gt; stands for &lt;strong&gt;Retrieval Augmented Generation&lt;/strong&gt;.&#xA;As the name suggests it is comprised of 3 stages:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Retrieval of query relevant information&lt;/li&gt;&#xA;&lt;li&gt;Augmenting the [[Original Question]] to include retrieved documents&lt;/li&gt;&#xA;&lt;li&gt;Generation of response by &lt;a href=&#34;zettelkasten/LLM.md&#34;&gt;LM&lt;/a&gt; inference with newly created prompt&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;why-would-we-use-a-rag-method&#34;&gt;Why would we use a RAG method?&lt;/h2&gt;&#xA;&lt;p&gt;Some key advantages of Retrieval-Augmented Generation (RAG) systems are&#xA;explained in the subsections below:&lt;/p&gt;&#xA;&lt;h3 id=&#34;improved-accuracy&#34;&gt;Improved Accuracy&lt;/h3&gt;&#xA;&lt;p&gt;By providing the context and some high quality external guidance, we expect the&#xA;LM to perform better in answering questions.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/raptor-indexing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/raptor-indexing/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Indexing&#34;&gt;Indexing&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Recursive&#xA;Abstractive&#xA;Processing&#xA;for&#xA;Tree&#xA;Organised&#xA;Retrieval&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/recursion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/recursion/</guid>
      <description>&lt;h1 id=&#34;recursion&#34;&gt;Recursion&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Recursion occurs when some function calls itself&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;For a given function $F$ we say that $F$ is recursive when it calls itself like so:&#xA;$$F(x) = F(x-1)*x$$&#xA;Note: in case specified above there is no base case. This means that the function will never stop the calls, will never finish&lt;/p&gt;&#xA;&lt;p&gt;If you wanted to implement a factorial function then you need to add a conditional statement like so&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/reduce-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/reduce-pattern/</guid>
      <description>&lt;h1 id=&#34;reduce-pattern&#34;&gt;Reduce pattern&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;A &amp;ldquo;Swiss knife&amp;rdquo; of &lt;a href=&#34;Function%20programming&#34;&gt;Function programming&lt;/a&gt;. Executes a function for every element of an &lt;a href=&#34;Array&#34;&gt;Array&lt;/a&gt; and returns accumulated result. Result can be of any type, but commonly is an int or a list. It can also represent a struct that in turn represents state.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Reduce function accepts a function, an array and starting value. If starting value is not provided, it assumes &lt;code&gt;arr[0]&lt;/code&gt; to be a start and &lt;code&gt;arr[1:]&lt;/code&gt; to be the array to execute given function.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/reflexive-relation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/reflexive-relation/</guid>
      <description>&lt;p&gt;One of &lt;a href=&#34;Relation%20in%20Mathematics.md&#34;&gt;Relation in Mathematics&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;A relation will be known as reflexive relative if every element of set $A$ is related to itself.&lt;/p&gt;&#xA;&lt;h3 id=&#34;if-the-relation-is-reflexive&#34;&gt;If the relation is reflexive:&lt;/h3&gt;&#xA;&lt;p&gt;If $aRa$ is satisfied $\forall a \in X$&lt;/p&gt;&#xA;&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;&#xA;&lt;p&gt;$X = \mathbb{Z}, aRb \equiv a+b \in 2\mathbb{Z}$ is reflexive because $a+a = 2a$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/registers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/registers/</guid>
      <description>&lt;p&gt;Register is just an &lt;a href=&#34;electronic%20circuit&#34;&gt;electronic circuit&lt;/a&gt; build from multiple &lt;a href=&#34;Flip-Flops&#34;&gt;Flip-Flops&lt;/a&gt; in one block&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/regular-expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/regular-expressions/</guid>
      <description>&lt;p&gt;[[ELAC]]&lt;/p&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Regular expressions are algebraic way to describe language. They describe regular languages. If $E$ is a regex, then $L(E)$ is the language it defines.&lt;/p&gt;&#xA;&lt;h3 id=&#34;basis-1&#34;&gt;Basis 1&lt;/h3&gt;&#xA;&lt;p&gt;Let $a$ be any symbol. Then $a$ is a regex and $L(a) = {a}$&lt;/p&gt;&#xA;&lt;h3 id=&#34;basis-2&#34;&gt;Basis 2&lt;/h3&gt;&#xA;&lt;p&gt;$\epsilon$ is a regex and $L(\epsilon) = {\epsilon}$&lt;/p&gt;&#xA;&lt;h3 id=&#34;basis-3&#34;&gt;Basis 3&lt;/h3&gt;&#xA;&lt;p&gt;$\emptyset$ is a regex and $L(\emptyset) = \emptyset$&lt;/p&gt;&#xA;&lt;h3 id=&#34;induction-1&#34;&gt;Induction 1&lt;/h3&gt;&#xA;&lt;p&gt;if $E_1 \wedge E_2$ are regex then ($E_1 | E_2$) is regex and $L(E_1 | E_2) = L(E_1) \cup L(E_2)$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/relation-in-mathematics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/relation-in-mathematics/</guid>
      <description>&lt;p&gt;In discrete mathematics, the relation can be described as a collection of ordered pairs.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;It is used to relate an object from one set to the other set, and the sets must be non-empty.&lt;/li&gt;&#xA;&lt;li&gt;Relation is always defined for set $X$.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;notation-example&#34;&gt;Notation (Example)&lt;/h3&gt;&#xA;&lt;p&gt;Relation of $a, b$ such that $a,b \in \mathbb{Z}$ and $a + b$ is an even number would be written as: $X = \mathbb{Z},\ aRb \equiv a+b \in 2Z$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/reservoir-sampling-algorithm-r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/reservoir-sampling-algorithm-r/</guid>
      <description>&lt;h1 id=&#34;problem&#34;&gt;Problem&lt;/h1&gt;&#xA;&lt;p&gt;Given a steam of size $N$ which is too large to fit into memory, randomly select $K$ elements such that each element has an equal probability of being chosen. Assume access to &lt;a href=&#34;Pseudo-random%20number%20generator%20(PRNG)&#34;&gt;Pseudo-random number generator (PRNG)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;code&#34;&gt;Code&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudo&#34; data-lang=&#34;pseudo&#34;&gt;ReservoirSample(stream, k)&#xD;&#xA;&#x9;R = stream[1...k]&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;for i = k+1, k+2, ..., n:&#xD;&#xA;&#x9;&#x9;# randomInitiger creates uniform output from inclusive range &amp;lt;min, max&amp;gt;&#xD;&#xA;&#x9;&#x9;j = randomInitiger(1,i)&#xD;&#xA;&#x9;&#x9;if j &amp;lt;= k: &#xD;&#xA;&#x9;&#x9;&#x9;R[j] = S[j]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reservoir_sampling&lt;/span&gt;(stream, k):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stream[:k] &lt;span style=&#34;color:#75715e&#34;&gt;# first k elements&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(stream):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;rand_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; random_index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;result[random_index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;c&#34;&gt;C&lt;/h2&gt;&#xA;&lt;p&gt;Assume function:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/resistor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/resistor/</guid>
      <description>&lt;h1 id=&#34;resistor&#34;&gt;Resistor&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221026205640.png&#34; alt=&#34;Pasted image 20221026205640&#34;&gt;&#xA;Arrow phrases matter! The usual $u = Ri$ is meaningless because when one of the arrows has the opposite direction, the formula is $u = -Ri$.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/resonance-in-electronic-circuit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/resonance-in-electronic-circuit/</guid>
      <description>&lt;p&gt;In AC circuits we may observe an interesting phenomenon called resonance. Actually, there are two definitions of resonance. The first defines a resonant pulsation of a one-port, which has impedance Z, as a pulsation ωr, for which the magnitude of impedance ∣Z∣ attains (as a function of pulsation) a strict local extremum (minimum or maximum). According to the other definition, a resonant pulsation of a one-port is a pulsation ωr, at which the impedance Z becomes purely real (i.e. it has non-zero imaginary part for pulsations belonging to a neighbourhood of ωr except for ωr, at which the imaginary part vanishes). A resonant frequency $f_r$ is related to resonant pulsation with equation ωr = 2πfr.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/retrieval-of-relevant-documents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/retrieval-of-relevant-documents/</guid>
      <description>&lt;h1 id=&#34;retrieval-of-relevant-documents&#34;&gt;Retrieval of relevant documents&lt;/h1&gt;&#xA;&lt;p&gt;Given the indexed database of documents that is in &lt;a href=&#34;Numerical%20representation%20for%20text%20search.md&#34;&gt;numerical representation&lt;/a&gt; we still want to retrieve the documents somehow. To do this, we need to perform &lt;a href=&#34;Embeddings&#34;&gt;Embedding&lt;/a&gt; operation again to retrieve the meaning of the question and then find &lt;a href=&#34;KNN.md&#34;&gt;K nearest neighbors&lt;/a&gt; to get all related documents from database.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/rooted-tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/rooted-tree/</guid>
      <description>&lt;p&gt;Type of &lt;a href=&#34;Tree.md&#34;&gt;Tree&lt;/a&gt; with designated &lt;a href=&#34;root%20node&#34;&gt;root node&lt;/a&gt; where every edge either points away from or towards the root node. When edges point away from the root the graph is called an out-tree or in-tree otherwise.&lt;/p&gt;&#xA;&lt;p&gt;Note: all out trees are also &lt;a href=&#34;Directed%20Acyclic%20Graphs%20(DAG).md&#34;&gt;Directed Acyclic Graphs (DAG)&lt;/a&gt;&#xA;Note: although tree on it&amp;rsquo;s own is undirected. Rooted tree is a DAG&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/self-consistent-field-in-kohn-sham-density-functional-theory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/self-consistent-field-in-kohn-sham-density-functional-theory/</guid>
      <description>&lt;p&gt;In Kohn–Sham &lt;a href=&#34;density%20functional%20theory%20(DFT)&#34;&gt;density functional theory (DFT)&lt;/a&gt;, the &lt;a href=&#34;self-consistent%20field%20(SCF)&#34;&gt;self-consistent field (SCF)&lt;/a&gt; is a mathematical method used to solve the &lt;a href=&#34;Schr%C3%B6dinger%20equation&#34;&gt;Schrödinger equation&lt;/a&gt;, which describes the behavior of electrons in a system. The Schrödinger equation is a complex and nonlinear equation that cannot be solved exactly in most cases, so the SCF method is used to approximate the solution.&lt;/p&gt;&#xA;&lt;p&gt;The SCF method is an iterative process in which an initial guess is made for the electronic wave function (the solution to the Schrödinger equation) and the corresponding electron density is calculated. This density is used to solve the Schrödinger equation again, yielding a new wave function and density. This process is repeated until the wave function and density converge to a stable solution, at which point the SCF calculation is considered to be complete.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/separation-of-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/separation-of-variables/</guid>
      <description>&lt;p&gt;Easiest way of solving ODEs&lt;/p&gt;&#xA;&lt;p&gt;Step 1: Change the equation to the form&#xA;$$F(y)dy = G(x)dx$$&#xA;Step 2: Integrate both sides&#xA;$$\int F(y)dy = \int G(x)dx$$&#xA;Step 3: Solve this new equation like any other&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/series-connections-equivalents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/series-connections-equivalents/</guid>
      <description>&lt;h1 id=&#34;series-of-connections&#34;&gt;Series of connections&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221028105911.png&#34; alt=&#34;Pasted image 20221028105911&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221028105922.png&#34; alt=&#34;Pasted image 20221028105922&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221028105936.png&#34; alt=&#34;Pasted image 20221028105936&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221028105955.png&#34; alt=&#34;Pasted image 20221028105955&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221028110020.png&#34; alt=&#34;Pasted image 20221028110020&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/sigma-notation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/sigma-notation/</guid>
      <description>&lt;h1 id=&#34;sigma-notation&#34;&gt;Sigma notation&lt;/h1&gt;&#xA;&lt;p&gt;Sigma notation is a shorthand notation for &lt;a href=&#34;Summation&#34;&gt;Summation&lt;/a&gt; of a sum that occurs with some pattern. It is commonly used with $\Sigma$ sign hence the name. Below the sign is number which starts the summation and above is the one that ends it (inclusive).&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ldquo;Sum all numbers from 1 to 10&amp;rdquo; would be&#xA;$$\sum_{1}^{10}n = 1 + 2 + \dots + 10$$&#xA;&amp;ldquo;Sum all positive numbers&amp;rdquo; is&#xA;$$\sum_{1}^{\infty}n = 1+2+3+\dots$$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/single-source-shortest-path-on-dag-sssp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/single-source-shortest-path-on-dag-sssp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;SSSP&#34;&gt;SSSP&lt;/a&gt; problem can be solved efficiently on a DAG in $O(V+E)$ time. This is due to the fact that the nodes can be ordered in a &lt;a href=&#34;Topological%20ordering.md&#34;&gt;Topological ordering&lt;/a&gt; via &lt;a href=&#34;Topological%20Sort.md&#34;&gt;Topological Sort&lt;/a&gt; and processed sequencially.&lt;/p&gt;&#xA;&lt;p&gt;In this case we don&amp;rsquo;t have to worry about negative edge weights as we do in other, more general algorithms.&lt;/p&gt;&#xA;&lt;h2 id=&#34;algorithm&#34;&gt;Algorithm&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Create topological order of nodes.&lt;/li&gt;&#xA;&lt;li&gt;Initiate an array with best score for each node. Set all values to infinity.&lt;/li&gt;&#xA;&lt;li&gt;Set the distance to starting node to 0.&lt;/li&gt;&#xA;&lt;li&gt;From that node explore all reachable nodes and update the value to new best score.&lt;/li&gt;&#xA;&lt;li&gt;Then, move to next node in topological order that you know the starting value (not infinity) and continue the search.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudo&#34; data-lang=&#34;pseudo&#34;&gt;# Gloal or class scope variables&#xD;&#xA;n = number of nodes in the graph&#xD;&#xA;graph = adjancy list representing graph&#xD;&#xA;&#xD;&#xA;function SSSP(start, graph, n):&#xD;&#xA;&#x9;topsort = topsort(graph, n)&#xD;&#xA;&#x9;dist = [null, ..., null]&#xD;&#xA;&#x9;for (i=0;i&amp;lt;n;++i){&#xD;&#xA;&#x9;&#x9;nodeid = topsort[i]&#xD;&#xA;&#x9;&#x9;if dist[nodeid] != null&#xD;&#xA;&#x9;&#x9;adjacentEdges = graph.get(nodeid)&#xD;&#xA;&#x9;&#x9;for edge in adjacentEdges:&#xD;&#xA;&#x9;&#x9;&#x9;newDist = dist[nodeid] + edge.weight&#xD;&#xA;&#x9;&#x9;&#x9;if dist[edge.to] == null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;dist[edge.to] = newDist&#xD;&#xA;&#x9;&#x9;&#x9;else:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;dist[edge.to] = min(dist[edge.to], newDist)&#x9;&#x9;&#xD;&#xA;&#x9;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/singly-linked-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/singly-linked-list/</guid>
      <description>&lt;h1 id=&#34;singly-linked-list&#34;&gt;Singly Linked List&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;A linked list is a &lt;a href=&#34;Data%20Structure&#34;&gt;Data Structure&lt;/a&gt; that is based on nodes. Each node holds some &lt;code&gt;data&lt;/code&gt; and a pointer to &lt;code&gt;next&lt;/code&gt; node. Each node is stored on a &lt;a href=&#34;Heap.md&#34;&gt;Heap&lt;/a&gt; and therefore nodes are spread out across memory.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Warning]&#xA;Remember! Single Linked List is highly inefficient because of the fact that it&amp;rsquo;s not localized! If insertions and deletions are common and &lt;a href=&#34;Array&#34;&gt;Array&lt;/a&gt; cannot be used then consider better alternatives such as &lt;a href=&#34;Tree.md&#34;&gt;Tree&lt;/a&gt; like structure.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/solving-heat-equation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/solving-heat-equation/</guid>
      <description>&lt;p&gt;Problem related to &lt;a href=&#34;Examples%20of%20PDEs.md&#34;&gt;Examples of PDEs&lt;/a&gt;&#xA;Constrains that $T(x,t)$ need to satisfy:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The PDE equation $$\frac{\partial T}{\partial t}(x,t) = \alpha\cdot\frac{\partial^2T}{\partial x^2}(x,t)$$&lt;/li&gt;&#xA;&lt;li&gt;Boundary condition&lt;/li&gt;&#xA;&lt;li&gt;Initial condition&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;To solve it we use Fourier&amp;rsquo;s work and his observations:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Finding solutions for sine waves is nice and rather simple&lt;/li&gt;&#xA;&lt;li&gt;Linearity - if we have solutions for any number of sinewaves then we have solution for their sum&lt;/li&gt;&#xA;&lt;li&gt;ANY function can be represented with sine functions (except some weird exceptions that definitely won&amp;rsquo;t come up 😉)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;We start by explaining WHY sine waves create nice solutions. Let&amp;rsquo;s start simple: Let&amp;rsquo;s say that we have a function $T(x,0) = sin(x)$ where $x$ is position of point on the rod.&#xA;Right hand side of heat equation asks what is the second derivative of our function. We can see that for $sin(x)$ function it&amp;rsquo;s $-sin(x)$, so each point it is equal but opposite to original function. So for $t=0$ following applies: $$\frac{\partial T}{\partial t}(x,t) = \alpha\cdot\frac{\partial^2T}{\partial x^2}(x,t) = -\alpha\cdot T (x,0)$$&#xA;So after some small $\Delta t$ everything scales down a little. and if we ignored boundary condition we could simply scale down the entire function. In general:&#xA;$$T(x,n\Delta t) = c^n\cdot sin(x)$$&#xA;So in fact it&amp;rsquo;s gonna be some constant times the function itself. That screams, begs to be written in exponential form. Note: rate of function change is proportional to the value of function at that step. We therefore rewrite the function as $T(x,t) = sin(x)\cdot e^{-\alpha t}$.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/span-of-vector-space/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/span-of-vector-space/</guid>
      <description>&lt;p&gt;The set of all possible vectors that you can reach with a &lt;a href=&#34;Linear%20combination.md&#34;&gt;Linear combination&lt;/a&gt; of vectors.&lt;/p&gt;&#xA;&lt;p&gt;In other words: if we treat vector as a point then span is a set of all points that we can access with given unit vectors&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/sr-flip-flop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/sr-flip-flop/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Flip-Flops&#34;&gt;Flip-Flops&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;sr-flip-flop&#34;&gt;SR Flip-Flop&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;A SR flip-flop (Set-Reset flip-flop) is a type of &lt;a href=&#34;Electronic%20circuit&#34;&gt;Electronic circuit&lt;/a&gt; that is used to store and manipulate &lt;a href=&#34;binary%20information&#34;&gt;binary information&lt;/a&gt;. It is a type of bistable circuit, which means that it has two stable states that it can assume, and can be easily switched between those states in response to external inputs.&lt;/p&gt;&#xA;&lt;p&gt;A SR flip-flop is made up of two logic gates, typically an AND gate and an OR gate, and a pair of inverters. The inputs to the circuit are a set (S) input and a reset (R) input, and the outputs are the Q and Q&amp;rsquo; (not Q) outputs. The Q and Q&amp;rsquo; outputs are the complements of each other, meaning that one is always the opposite of the other.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/sr-latch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/sr-latch/</guid>
      <description>&lt;h1 id=&#34;sr-latch&#34;&gt;SR Latch&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;SR latch is a sequential cirtuit that acts not only on the input but is &lt;a href=&#34;State%20based%20circuit&#34;&gt;State based circuit&lt;/a&gt;.&#xA;SR latch is commonly used to define &lt;a href=&#34;memory%20blocks&#34;&gt;memory blocks&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;REMEMBER: implementation with &lt;a href=&#34;NOR%20gate.md&#34;&gt;NOR gate&lt;/a&gt; and &lt;a href=&#34;NAND%20gate.md&#34;&gt;NAND gate&lt;/a&gt; have different outputs for the same input!&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;h3 id=&#34;implementation-with-nor-gatenor20gatemd&#34;&gt;Implementation with &lt;a href=&#34;NOR%20gate.md&#34;&gt;NOR gate&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221116195210.png&#34; alt=&#34;300&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;truth-table&#34;&gt;Truth Table&lt;/h4&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;S&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;R&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Impact&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;No change&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Set $Q=1$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Set $\bar{Q}=1$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Not allowed&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;implementation-with-nand-gatenand20gatemd&#34;&gt;Implementation with &lt;a href=&#34;NAND%20gate.md&#34;&gt;NAND gate&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221116204616.png&#34; alt=&#34;300&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/stack/</guid>
      <description>&lt;h1 id=&#34;stack&#34;&gt;Stack&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Stack is an insanely powerful &lt;a href=&#34;Data%20Structure&#34;&gt;Data Structure&lt;/a&gt;. It operates on basis of LIFO meaning that element that was pushed last will be used first.&lt;/p&gt;&#xA;&lt;h2 id=&#34;associated-functions&#34;&gt;Associated Functions&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;push - add element to stack&lt;/li&gt;&#xA;&lt;li&gt;pop - remove element from stack&lt;/li&gt;&#xA;&lt;li&gt;top - get value of the top element (without removing it)&#xA;Note: methods &amp;ldquo;pop&amp;rdquo; and &amp;ldquo;top&amp;rdquo; can sometimes be merged together as &amp;ldquo;pop&amp;rdquo;. It&amp;rsquo;s important to read documentation to see if this is the case. When implementing Stack on our own it&amp;rsquo;s quite a standard to make them separate.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Imagine stack as a drawer with documents. If you put some documents &amp;lsquo;A,B,C,D&amp;rsquo; in the drawer you can only take them out in &amp;lsquo;D-&amp;gt;C-&amp;gt;B-&amp;gt;A&amp;rsquo; order.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/state-space-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/state-space-model/</guid>
      <description>&lt;p&gt;[[math model]]&#xA;Each model will have variables like:&#xA;$$&#xA;\begin{split}&#xA;x = Ax + Bu\&#xA;y = Cx + Du&#xA;\end{split}&#xA;$$&#xA;where&#xA;$x$ = real vector of size $n$&#xA;$u$ = real vector of size $m$&#xA;$y$ = real vector of size $p$&#xA;$A$ is a matrix of real numbers with size $n\times n$&#xA;$B$ is a matrix of real numbers with size $n\times m$&#xA;$C$ is a matrix of real numbers with size $p\times n$ = $I$&#xA;$D$ is a matrix of real numbers with size $p\times m$ = zeros&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/statistics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/statistics/</guid>
      <description>&lt;h1 id=&#34;statistics&#34;&gt;Statistics&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;The discipline that concerns the collection, interpretation and presentation of data.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Statistics can be seen as reversed &lt;a href=&#34;Probability.md&#34;&gt;Probability&lt;/a&gt; because given data we try to measure how certain we are of probabilities of certain events.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/steps-to-multiprocessing-in-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/steps-to-multiprocessing-in-python/</guid>
      <description>&lt;p&gt;Say you have a code you want to run in parallel. To do that you can follow those steps:&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1&#34;&gt;Step 1&lt;/h2&gt;&#xA;&lt;p&gt;Make code a function. This makes it good for any code as it separates the input and output of the algorithm.&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-2&#34;&gt;Step 2&lt;/h2&gt;&#xA;&lt;p&gt;Format your code to use &lt;a href=&#34;Map%20Pattern.md&#34;&gt;Map Pattern&lt;/a&gt;. It may be specially useful to use &lt;a href=&#34;Partial%20pattern.md&#34;&gt;Partial pattern&lt;/a&gt; to turn functions from multi-parameter to &lt;a href=&#34;Unary%20function.md&#34;&gt;Unary function&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-3&#34;&gt;Step 3&lt;/h2&gt;&#xA;&lt;p&gt;Use one of many functions of &lt;code&gt;multiprocessing&lt;/code&gt; module to run code in parallel. In particular, focus on &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;imap&lt;/code&gt; of &lt;code&gt;imap_unordered&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/strongly-connected-component-scc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/strongly-connected-component-scc/</guid>
      <description>&lt;h1 id=&#34;strongly-connected-component-scc&#34;&gt;Strongly Connected Component (SCC)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Strongly Connected Components (SCC) can be thought of as self-contained cycles within a &lt;a href=&#34;Directed%20Graph.md&#34;&gt;Directed Graph&lt;/a&gt; where every vertex in a given cycle can reach every other vertex in the same cycle.&lt;/p&gt;&#xA;&lt;h2 id=&#34;algorithm-for-finding-sccs&#34;&gt;Algorithm for finding SCCs&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudo&#34; data-lang=&#34;pseudo&#34;&gt;UNVISITED = -1&#xD;&#xA;n = number of nodes in the graph&#xD;&#xA;g = graph we work on&#xD;&#xA;&#xD;&#xA;id = 0 # Give each node it&amp;#39;s id&#xD;&#xA;sccCount = 0 # Used to count number of SCCs found&#xD;&#xA;&#xD;&#xA;ids = [0,0,...,0] # len = n&#xD;&#xA;low = [0,0,...,0] # len = n&#xD;&#xA;&#xD;&#xA;onStack = false&#xD;&#xA;stack = an empty stack DS&#xD;&#xA;&#xD;&#xA;function find Sccs():&#xD;&#xA;&#x9;for (i=0;i&amp;lt;n;++i): ids[i] = UNVISITED&#xD;&#xA;&#x9;for (i=0;i&amp;lt;n;++i):&#xD;&#xA;&#x9;&#x9;if (ids[i] == UNVISITED):&#xD;&#xA;&#x9;&#x9;&#x9;dfs(i)&#xD;&#xA;&#x9;return low&#xD;&#xA;&#xD;&#xA;# modified DFS here:&#xD;&#xA;function dfs(at):&#xD;&#xA;&#x9;stack.push(at)&#xD;&#xA;&#x9;onStack[at] = true&#xD;&#xA;&#x9;ids[at] = low[at] = id++&#xD;&#xA;&#xD;&#xA;&#x9;for(to: g[at]):&#xD;&#xA;&#x9;&#x9;if (ids[to] == UNVISITED): dfs(to)&#xD;&#xA;&#x9;&#x9;if (onStack[to]): low[at] = min(low[at],low[to])&#xD;&#xA;&#x9;if (ids[at] == low[at]):&#xD;&#xA;&#x9;&#x9;for (node = stack.pop();;node=stack.pop())&#xD;&#xA;&#x9;&#x9;&#x9;onStack[node] = false&#xD;&#xA;&#x9;&#x9;&#x9;low[node] = ids[at]&#xD;&#xA;&#x9;&#x9;&#x9;if(node==at):break&#xD;&#xA;&#x9;&#x9;sccCount++&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/structure-of-arrays-soa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/structure-of-arrays-soa/</guid>
      <description>&lt;p&gt;#TODO&#xA;SIMD based optimization method. Insanely efficient! Idea is that when you iterate over an elements you should only iterate through data that actually matters as that improves the number of cache hits.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/structured-output-from-llm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/structured-output-from-llm/</guid>
      <description>&lt;h1 id=&#34;structured-output-from-llm&#34;&gt;Structured output from LLM&lt;/h1&gt;&#xA;&lt;p&gt;Either with&#xA;&lt;a href=&#34;zettelkasten/Assistant%20task%20execution.md&#34;&gt;Assistant task execution&lt;/a&gt;&#xA;or ill-defined user input (not structured commands) we may want to restrict the&#xA;LLM into the output that can be then converted into parsable object (usually&#xA;JSON) to then either make it a pydantic model or just use directly.&lt;/p&gt;&#xA;&lt;p&gt;Often times we may have a user-facing part of the app but we may not know what&#xA;exactly the user will type (no buttons or sth). Then, one nice use-case of the&#xA;LLM is we can understand the query the user asks us and then transform it into&#xA;an object.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/substitution-algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/substitution-algorithms/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Encryption.md&#34;&gt;Encryption&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;substitution-algorithms&#34;&gt;Substitution Algorithms&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;To create &lt;a href=&#34;Ciphertext.md&#34;&gt;Ciphertext&lt;/a&gt; they do specific &lt;strong&gt;substitution&lt;/strong&gt; of the signs in the &lt;a href=&#34;Plain%20text.md&#34;&gt;Plain text&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Examples include &lt;a href=&#34;Cesar&#39;s%20code&#34;&gt;Cesar&amp;rsquo;s code&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/sum-of-binomial-distribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/sum-of-binomial-distribution/</guid>
      <description>&lt;p&gt;#TODO&lt;/p&gt;&#xA;&lt;h1 id=&#34;sum-of-binomial-distribution&#34;&gt;Sum of binomial distribution&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/super-encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/super-encryption/</guid>
      <description>&lt;h1 id=&#34;super-encryption&#34;&gt;Super encryption&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Way of doing &lt;a href=&#34;Encryption.md&#34;&gt;Encryption&lt;/a&gt; such that one algorithm is applied after the other. In this way we can use a couple of weak encryptions in order to get much stronger one.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/surjective-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/surjective-function/</guid>
      <description>&lt;p&gt;Type of &lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Also known as onto function.&lt;/p&gt;&#xA;&lt;p&gt;A function will be known as a onto (Surjective) function if every element of a co-domain set is connected with at least one or more than one element of a domain set.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/surjective%20function.png&#34; alt=&#34;400x300&#34;&gt;&#xA;&lt;img src=&#34;../attachments/not%20surjective%20function.png&#34; alt=&#34;400x300&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/symmetric-encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/symmetric-encryption/</guid>
      <description>&lt;h1 id=&#34;symmetric-encryption&#34;&gt;Symmetric encryption&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a kind of &lt;a href=&#34;Encryption.md&#34;&gt;Encryption&lt;/a&gt; where &lt;a href=&#34;Encryption%20Key&#34;&gt;Encryption Key&lt;/a&gt; and &lt;a href=&#34;Decryption%20Key&#34;&gt;Decryption Key&lt;/a&gt; are easily deducible if you know one or the other. Therefore both key have to be kept in a secure way.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;It&amp;rsquo;s very common for keys in question to be identical!&#xA;Also known as systems with a private key or systems with only one key.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/symmetric-relation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/symmetric-relation/</guid>
      <description>&lt;p&gt;One of &lt;a href=&#34;Relation%20in%20Mathematics.md&#34;&gt;Relation in Mathematics&lt;/a&gt;, similar to &lt;a href=&#34;Communicative%20binary%20property.md&#34;&gt;Communicative binary property&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Relation is symmetric if relation is true for every $bRa$ when $aRb$ is true.&lt;/p&gt;&#xA;&lt;p&gt;If $aRb$&#xA;then $bRa\ \forall a,b \in A$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/system-of-linear-equations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/system-of-linear-equations/</guid>
      <description>&lt;h3 id=&#34;system-of-linear-equations&#34;&gt;System of linear equations&lt;/h3&gt;&#xA;&lt;p&gt;Example system of equations:&#xA;$2x + 5y + 3z = -3$&#xA;$4x + 0y + 8z = 0$&#xA;$1x + 3y + 0z = 2$&lt;/p&gt;&#xA;&lt;p&gt;A system of equations like this can be represented as follows:&lt;/p&gt;&#xA;&lt;p&gt;$$\begin{bmatrix} 2 &amp;amp; 5 &amp;amp; 3 \ 4 &amp;amp; 0 &amp;amp; 8 \ 1 &amp;amp; 3 &amp;amp; 0 \end{bmatrix} * \begin{bmatrix} x \ y \ z \end{bmatrix} =&#xA;\begin{bmatrix} -3 \ 0 \ 2 \end{bmatrix}$$&#xA;Then we can denote that:&#xA;$$A = \begin{bmatrix} 2 &amp;amp; 5 &amp;amp; 3 \ 4 &amp;amp; 0 &amp;amp; 8 \ 1 &amp;amp; 3 &amp;amp; 0 \end{bmatrix},\&#xA;\vec{x} = \begin{bmatrix} x \ y \ z \end{bmatrix},\&#xA;\vec{v} = \begin{bmatrix} -3 \ 0 \ 2 \end{bmatrix}$$&#xA;To solve this system:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/tabulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/tabulation/</guid>
      <description>&lt;p&gt;Similar to &lt;a href=&#34;Memoization.md&#34;&gt;Memoization&lt;/a&gt; as it is also saving the result of the function, this time in a table. This time you try to work &amp;ldquo;bottom-up&amp;rdquo;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;fill array of &amp;ldquo;x*2&amp;rdquo; starting at 0: array = {0,2,4,6,8,&amp;hellip;} can be computed as fn(x) = fn(x-1) + 2.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/taylor-series/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/taylor-series/</guid>
      <description>&lt;h1 id=&#34;taylor-series&#34;&gt;Taylor series&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;In mathematics, the Taylor series of a function is an infinite sum of terms that are expressed in terms of the function&amp;rsquo;s derivatives at a single point. The partial sum formed by the first n + 1 terms of a Taylor series is a polynomial of degree n that is called the nth Taylor polynomial of the function. Taylor polynomials are approximations of a function, which become generally better as n increases, however it&amp;rsquo;s not general - sometimes the derivatives don&amp;rsquo;t converge and adding more terms don&amp;rsquo;t add more information.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/the-marsenne-twister/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/the-marsenne-twister/</guid>
      <description>&lt;p&gt;The Marsenne Twister is a &lt;a href=&#34;Pseudo-random%20number%20generator%20(PRNG)&#34;&gt;Pseudo-random number generator (PRNG)&lt;/a&gt; algorithm that is widely used due to its high-performance and long period. It was developed in 1997 by Makoto Matsumoto and Takuji Nishimura as an improvement on existing PRNG algorithms.&lt;/p&gt;&#xA;&lt;p&gt;The algorithm works by using a large &lt;a href=&#34;Mersenne%20prime&#34;&gt;Mersenne prime&lt;/a&gt; number (a prime number that is one less than a power of two) to generate a sequence of numbers that appear to be random. These numbers are then used in applications that require randomness, such as in computer simulations, games, and cryptography.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/thevenins-and-nortons-equivalents-equivalence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/thevenins-and-nortons-equivalents-equivalence/</guid>
      <description>&lt;h1 id=&#34;thevenins-and-nortons-equivalents-equivalence&#34;&gt;Thevenin&amp;rsquo;s and Norton&amp;rsquo;s equivalents equivalence&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221030191615.png&#34; alt=&#34;Pasted image 20221030191615&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221030192107.png&#34; alt=&#34;Pasted image 20221030192107&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221030192126.png&#34; alt=&#34;Pasted image 20221030192126&#34;&gt;&#xA;&lt;img src=&#34;../attachments/Pasted%20image%2020221030192150.png&#34; alt=&#34;Pasted image 20221030192150&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;thevenins-equivalent&#34;&gt;Thevenin&amp;rsquo;s equivalent&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221030191445.png&#34; alt=&#34;Pasted image 20221030191445&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/topological-ordering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/topological-ordering/</guid>
      <description>&lt;p&gt;Topological orderingwhich is an order where foreach directed edge (u,v) anode u appears before node v in the ordering.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;If graph represents courses and node (u,v) represents couse u being prerequisite for v then topological ordering is an order in which you can learn all courses &amp;ldquo;in order&amp;rdquo; meaning all prerequisites are done before main courses.&lt;/p&gt;&#xA;&lt;p&gt;Note: There often isn&amp;rsquo;t just one unique topological order for a graph.&#xA;Note: not every graph has topological order. Only &lt;a href=&#34;Directed%20Acyclic%20Graphs%20(DAG).md&#34;&gt;Directed Acyclic Graphs (DAG)&lt;/a&gt; do! that is beacause you cannot start with any node if there is mutual dependency of nodes&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/topological-sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/topological-sort/</guid>
      <description>&lt;p&gt;Topological sort (or top sort for short) is an algorithm that work on &lt;a href=&#34;Directed%20Acyclic%20Graphs%20(DAG).md&#34;&gt;Directed Acyclic Graphs (DAG)&lt;/a&gt;. It creates something called &lt;a href=&#34;Topological%20ordering.md&#34;&gt;Topological ordering&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Topological sort works with $O(V+E)$ complexity.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Warning]&#xA;Remember that this works ONLY for DAG. Any graph with cycles in it will not work!&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;algorithm&#34;&gt;Algorithm&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Pick an unvisided node&lt;/li&gt;&#xA;&lt;li&gt;Beginning with the selected node, do a &lt;a href=&#34;Depth%20First%20Search%20(DFS).md&#34;&gt;Depth First Search (DFS)&lt;/a&gt; exploring only unvisited nodes.&lt;/li&gt;&#xA;&lt;li&gt;On recursive callback of the DFS, add the current node to the topological ordering in the reverse order. (Or add to array and remember to revese it after the end of algorithm)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;h3 id=&#34;naive&#34;&gt;Naive&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pseudo&#34; data-lang=&#34;pseudo&#34;&gt;# Gloal or class scope variables&#xD;&#xA;n = number of nodes in the graph&#xD;&#xA;graph = adjancy list representing graph&#xD;&#xA;visited = [false, ..., false] # size n&#xD;&#xA;&#xD;&#xA;function topsort():&#xD;&#xA;&#x9;ordering = [0,...,0] # Length N&#xD;&#xA;&#x9;i = N-1 # Index for ordering array&#xD;&#xA;&#xD;&#xA;&#x9;for (at=0; at&amp;lt;N; at++):&#xD;&#xA;&#x9;&#x9;if V[at] == false:&#xD;&#xA;&#x9;&#x9;&#x9;visited_nodes = []&#xD;&#xA;&#x9;&#x9;&#x9;dfs(at, visitedNodes)&#xD;&#xA;&#x9;&#x9;&#x9;for nodeId in visited_nodes:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ordering[i] = nodeId&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;i = i-1&#xD;&#xA;&#x9;return ordering&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# Modified DepthFirstSearch:&#xD;&#xA;function dfs(at, visitedNodes):&#xD;&#xA;&#xD;&#xA;&#x9;V[at] = true&#xD;&#xA;&#x9;edges = graph.getEdgesOutFromNode(at)&#xD;&#xA;&#x9;for edge in edges:&#xD;&#xA;&#x9;&#x9;if v[edge.to] == false:&#xD;&#xA;&#x9;&#x9;&#x9;dfs(edge.to, visitedNodes)&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;visitedNodes.add(at)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;optimised&#34;&gt;Optimised&lt;/h3&gt;&#xA;&lt;p&gt;Optimisation will focus on eliminating the creation and use of &lt;code&gt;visited_nodes&lt;/code&gt; array as it serves no function other that to make things easier. We will rewrite the code to modify &lt;code&gt;ordering&lt;/code&gt; array directly.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/transformers-and-dc-dc-converters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/transformers-and-dc-dc-converters/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;electronic%20circuit&#34;&gt;electronic circuit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;transformers-and-dc-dc-converters&#34;&gt;Transformers and DC-DC converters&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221028102222.png&#34; alt=&#34;Pasted image 20221028102222&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/transitive-relation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/transitive-relation/</guid>
      <description>&lt;p&gt;One of &lt;a href=&#34;Relation%20in%20Mathematics.md&#34;&gt;Relation in Mathematics&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;if-relation-is-transitive&#34;&gt;If relation is transitive&lt;/h3&gt;&#xA;&lt;p&gt;$\forall a, b, c \in A$&#xA;If $(a, b) \in R \land (b, c) \in R$ then $(a, c) \in R$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/transposition-algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/transposition-algorithms/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Encryption.md&#34;&gt;Encryption&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;transposition-algorithms&#34;&gt;Transposition Algorithms&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;To create &lt;a href=&#34;Ciphertext.md&#34;&gt;Ciphertext&lt;/a&gt; they do specific &lt;strong&gt;reordering&lt;/strong&gt; of the signs in the &lt;a href=&#34;Plain%20text.md&#34;&gt;Plain text&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intuition&#34;&gt;Intuition&lt;/h2&gt;&#xA;&lt;p&gt;Examples include &lt;a href=&#34;Cesar&#39;s%20code&#34;&gt;Cesar&amp;rsquo;s code&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/travelling-salesman-problem-tsp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/travelling-salesman-problem-tsp/</guid>
      <description>&lt;h1 id=&#34;travelling-salesman-problem-tsp&#34;&gt;Travelling Salesman Problem (TSP)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;TSP is a famous problem in Computer Science. It is very difficult to provide good algorithm for TSP for large scale.&lt;/p&gt;&#xA;&lt;h2 id=&#34;problem&#34;&gt;Problem:&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Given a list of cities and the distances between each pair of cities what is the shortest possible route that visits each city exactly once and returns to the origin city&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;In other words:&#xA;Given a complete &lt;a href=&#34;Weighted%20Graph.md&#34;&gt;Weighted Graph&lt;/a&gt; what is the Hamiltonian cycle of minimum cost.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/tree/</guid>
      <description>&lt;p&gt;A tree is an &lt;a href=&#34;Undirected%20Graph.md&#34;&gt;Undirected Graph&lt;/a&gt; with no cycles. Equivalently, it is a connected graph with N nodes and N-1 edges.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/truth-tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/truth-tables/</guid>
      <description>&lt;h1 id=&#34;truth-tables&#34;&gt;Truth Tables&lt;/h1&gt;&#xA;&lt;p&gt;Truth tables allow us to see results of aplying different inputs to specified logic gates&lt;/p&gt;&#xA;&lt;h2 id=&#34;examples-of-most-common&#34;&gt;Examples of most common:&lt;/h2&gt;&#xA;&lt;h3 id=&#34;not--lnot-&#34;&gt;NOT ( $\lnot$ )&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Also in math: r = 1-p&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;and--land-&#34;&gt;AND ( $\land$ )&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Q&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Also in math: r = pq&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;or--lor-&#34;&gt;OR ( $\lor$ )&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Q&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Also in math: r = p+q-pq&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;if--rightarrow-&#34;&gt;IF ( $\Rightarrow$ )&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Q&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Can be represented as:  $\lnot$p $\lor$ q&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Also in math: 1-p + pq&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;iff--leftrightarrow-&#34;&gt;IFF ( $\Leftrightarrow$ )&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Q&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Can be represented as: (p $\Rightarrow$ q) $\land$ q&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;xor---&#34;&gt;XOR ( ^ )&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Q&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Can be represented as: $\lnot$ (p $\Leftrightarrow$ q)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;nand--shafer-stroke---&#34;&gt;NAND ( Shafer Stroke  | )&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Q&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Can be represented as:  $\lnot$ (p $\land$ q)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;nor&#34;&gt;NOR&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Q&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Can be represented as:  $\lnot$ (p $\lor$ q)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/types-of-keys-in-data-bases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/types-of-keys-in-data-bases/</guid>
      <description>&lt;p&gt;Types of keys that are present in data bases:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Primary&lt;/li&gt;&#xA;&lt;li&gt;Foreign&lt;/li&gt;&#xA;&lt;li&gt;Candidate&lt;/li&gt;&#xA;&lt;li&gt;Super&lt;/li&gt;&#xA;&lt;li&gt;Alternate&lt;/li&gt;&#xA;&lt;li&gt;Surrogate&lt;/li&gt;&#xA;&lt;li&gt;Natural&lt;/li&gt;&#xA;&lt;li&gt;Simple&lt;/li&gt;&#xA;&lt;li&gt;Composite/Compound&lt;/li&gt;&#xA;&lt;li&gt;Inteligent&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;primary-key&#34;&gt;Primary key&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Unique identifier&lt;/li&gt;&#xA;&lt;li&gt;Highly stable&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;candidate-key&#34;&gt;Candidate key&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Key that could be a primary key&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;super-key&#34;&gt;Super key&lt;/h2&gt;&#xA;&lt;p&gt;Super key is a key composed by multiple attributes, but can and should be reduced to use less components.&lt;/p&gt;&#xA;&lt;h2 id=&#34;alternate-key&#34;&gt;Alternate key&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A unique key other than primary key. value of this key cannot be inserted twice to the table&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;foreign-key&#34;&gt;Foreign key&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;value that is value present in other table (this other value is usually primary key)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;surrogate-key&#34;&gt;Surrogate key&lt;/h2&gt;&#xA;&lt;p&gt;Key that is used as a replacement for some other value, and only have meaning in a context of the data base they are used in.&#xA;In practice it&amp;rsquo;s usually &amp;ldquo;ID&amp;rdquo; field that is used to uniquely represent the value in a row.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/unapply-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/unapply-pattern/</guid>
      <description>&lt;h1 id=&#34;unapply-pattern&#34;&gt;Unapply pattern&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Pattern that gathers the arguments into a list of arguments for a function. Part of a &lt;a href=&#34;Function%20programming&#34;&gt;Function programming&lt;/a&gt; theory.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unapply&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unapplyFn&lt;/span&gt;(...&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;Sometimes we have functions that we cannot alter but need to use in drastically different form:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;([&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;]){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;unapply&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;) ) &lt;span style=&#34;color:#75715e&#34;&gt;// 15&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Error is caused by to few arguments, &lt;code&gt;arr&lt;/code&gt; is passed as &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is empty.&#xA;Probably, we wanted &lt;code&gt;x&lt;/code&gt; to be 3 and &lt;code&gt;y&lt;/code&gt; to be 9. Therefore we program:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/unary-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/unary-function/</guid>
      <description>&lt;h1 id=&#34;unary-function&#34;&gt;Unary function&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Function accepting single argument. Part of &lt;a href=&#34;Function%20programming&#34;&gt;Function programming&lt;/a&gt; theory&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;p&gt;In JavaScript we may do a simple adapter for any function to accept only a single argument.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unary&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onlyOneArg&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This way, is function &lt;code&gt;fn&lt;/code&gt; accepts only one argument. This is useful to ensure that when we pass it to another function it truly is only unary function.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;It is common to explain a usefulness of unary adapter with tool like &lt;a href=&#34;Map%20Pattern.md&#34;&gt;Map Pattern&lt;/a&gt;. Say we have a function &lt;code&gt;parseInt&lt;/code&gt; that accepts &lt;code&gt;value&lt;/code&gt; that is string representation of an int and &lt;code&gt;radix&lt;/code&gt; that is the system that number has been coded as.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/undirected-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/undirected-graph/</guid>
      <description>&lt;p&gt;An undirected graph is a graph is a graph in which edges have no orientation. The edge (u,v) is identical to the edge (v,u).&#xA;&lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/unit-circle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/unit-circle/</guid>
      <description>&lt;p&gt;In mathematics, a unit circle is a circle of unit radius—that is, a radius of 1.&lt;/p&gt;&#xA;&lt;p&gt;commonly used to visualise trigonometric functions as well as &lt;a href=&#34;Complex%20number.md&#34;&gt;Complex number&lt;/a&gt; properties.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/unit-vector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/unit-vector/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Vector.md&#34;&gt;Vector&lt;/a&gt; that defines space.&#xA;Unit vectors are allways of length 1 and by &lt;a href=&#34;Linear%20combination.md&#34;&gt;Linear combination&lt;/a&gt; of them we can represent all vectors in space.&#xA;Unit vectors should be &lt;a href=&#34;Linear%20dependence.md&#34;&gt;Linearly independent&lt;/a&gt; to maximise a &lt;a href=&#34;Span%20of%20vector%20space.md&#34;&gt;Span of vector space&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;notation&#34;&gt;Notation&lt;/h3&gt;&#xA;&lt;p&gt;For 2d it is customary to use $\vec{i}, \vec{j}$ for x and y axis respectively.&#xA;For higher dimensions we typicaly use $\vec{k}$, $\vec{l}$, $\vec{m}$, etc.&#xA;It&amp;rsquo;s also common to use $\hat{i}$, or $\hat{j}$ notation but  $\vec{i}, \vec{j}$ makes it obious it&amp;rsquo;s a vector we are talking about and that is what we will use.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/vector-addition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/vector-addition/</guid>
      <description>&lt;p&gt;Vector addition is a &lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;function&lt;/a&gt; that uses 2 &lt;a href=&#34;Vector.md&#34;&gt;vectors&lt;/a&gt; and results in a new vector where each component is a result of sum of corresponding components of both vectors.&lt;/p&gt;&#xA;&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Communicative%20binary%20property.md&#34;&gt;Communicative binary property&lt;/a&gt;&#xA;&lt;a href=&#34;Associative%20binary%20property.md&#34;&gt;Associative binary property&lt;/a&gt;&#xA;&lt;a href=&#34;Distributive%20binary%20property.md&#34;&gt;Distributive binary property&lt;/a&gt; with respect to &lt;a href=&#34;Vector%20scaling.md&#34;&gt;Vector scaling&lt;/a&gt; and &lt;a href=&#34;Linear%20transformation.md&#34;&gt;Linear transformation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;&#xA;&lt;p&gt;$$A = \begin{bmatrix} 1\2\3 \end{bmatrix},&#xA;B = \begin{bmatrix} 3\8\-1 \end{bmatrix}$$&#xA;$$C = A+B = \begin{bmatrix} A_{1} + B_{1}\A_{2} + B_{2}\A_{3} + B_{3} \end{bmatrix}$$&#xA;$$ C = \begin{bmatrix} 1\2\3 \end{bmatrix} + \begin{bmatrix} 3\8\-1 \end{bmatrix} =   \begin{bmatrix} 4\10\2 \end{bmatrix} $$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/vector-field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/vector-field/</guid>
      <description>&lt;h1 id=&#34;vector-field&#34;&gt;Vector field&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;Vector field is what you get when you associate each point in space with a &lt;a href=&#34;Vector.md&#34;&gt;Vector&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We can treat this field as a &lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;Function in Mathematics&lt;/a&gt; that uses $n$ variables (or 1 vector of $n^{th}$ degree) and returns a vector of degree $n$.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;We often don&amp;rsquo;t graph vectors with their lengths but instead choose to represent magnitude of a vector with corresponding colour.&#xA;Often vector fields are not static! for instance wind could be represented as vector field and wind often comes in gusts.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/vector-norm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/vector-norm/</guid>
      <description>&lt;p&gt;For different purposes there are several &amp;ldquo;norms&amp;rdquo; of a vector that we care about.&#xA;In general the norm of the vector is a distance from the origin calculated in some way.&#xA;Those are called in order:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$L^{1}$ norm&lt;/li&gt;&#xA;&lt;li&gt;$L^{2}$ norm&lt;/li&gt;&#xA;&lt;li&gt;Max norm&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;Notation&lt;/h2&gt;&#xA;&lt;p&gt;For a vector $v$ we note it&amp;rsquo;s norm with $||v||$ and information of which norm we calculate in a subscript.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For $L^1$: $||v||_1$&lt;/li&gt;&#xA;&lt;li&gt;For $L^2$: $||v||_2$&lt;/li&gt;&#xA;&lt;li&gt;For $L^\infty$: $||v||_\infty$&#xA;If no subscript is used, we assume $L^2$ norm.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;l1-norm&#34;&gt;$L^1$ norm&lt;/h2&gt;&#xA;&lt;p&gt;a.k.a Manhattan norm&#xA;This norm calculates the sum of absolute values of the components of the vector.&#xA;This is often used in mazes that follow the grid as distance between points is the distance across all directions.&#xA;For vector $[1,2,-3]$, it&amp;rsquo;s $L^1$ norm is calculated like so: $result = 1+2+3=6$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/vector-scaling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/vector-scaling/</guid>
      <description>&lt;p&gt;Vector scaling is a &lt;a href=&#34;Function%20in%20Mathematics.md&#34;&gt;function&lt;/a&gt; that takes in a scalar ( eg. 2, $\frac{1}{3}$, -1.8 ) and a &lt;a href=&#34;Vector.md&#34;&gt;Vector&lt;/a&gt; and creates a new vector that has all components multiplied by scalar.&lt;/p&gt;&#xA;&lt;p&gt;In general for 3d vector:&#xA;$$\vec{R} = a * \vec{v} = \begin{bmatrix} v _{1} * a\v _{2} * a\v _{3} * a \end{bmatrix}$$&lt;/p&gt;&#xA;&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Communicative%20binary%20property.md&#34;&gt;Communicative binary property&lt;/a&gt;&#xA;&lt;a href=&#34;Associative%20binary%20property.md&#34;&gt;Associative binary property&lt;/a&gt;&#xA;&lt;a href=&#34;Distributive%20binary%20property.md&#34;&gt;Distributive binary property&lt;/a&gt; with respect to &lt;a href=&#34;Vector%20addition.md&#34;&gt;Vector addition&lt;/a&gt; and &lt;a href=&#34;Linear%20transformation.md&#34;&gt;Linear transformation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;&#xA;&lt;p&gt;$$A = \begin{bmatrix} 1\2\3 \end{bmatrix}$$&#xA;$$B = A * 2 = \begin{bmatrix} 2\4\6 \end{bmatrix}$$&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/vector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/vector/</guid>
      <description>&lt;h2 id=&#34;ways-of-interpreting-vector&#34;&gt;Ways of interpreting vector&lt;/h2&gt;&#xA;&lt;p&gt;Common way of interpreting the vector is to associate it with a force or movement in certain direction. Also it&amp;rsquo;s common to associate it with a point in space.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;In Physics we often visualize a vector with an arrow in space&lt;/li&gt;&#xA;&lt;li&gt;In Computer Science we can represent vectors with an ordered list of numbers&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Mathematics tries to generalize the idea of a vector and use it whenever it makes sense to use functions like addition or multiplication of vectors&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/vertical-scaling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/vertical-scaling/</guid>
      <description>&lt;p&gt;#TODO&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/voltage-divider-formula-vdf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/voltage-divider-formula-vdf/</guid>
      <description>&lt;h1 id=&#34;voltage-divider-formula&#34;&gt;Voltage divider formula&lt;/h1&gt;&#xA;&lt;p&gt;Note: we only consider series connection because voltage flowing through a parrarel elements is ALLWAYS the same (in ideal case).&lt;/p&gt;&#xA;&lt;p&gt;Note: knowing the voltage and total resistance we can deduce the current and then calculate the voltage across the resistors in a two step fasion. Below is given the alternative to this method.&lt;/p&gt;&#xA;&lt;h2 id=&#34;for-a-pair-resistors&#34;&gt;For a pair resistors&lt;/h2&gt;&#xA;&lt;p&gt;$R_1,R_2$ and currents $I_1,I_2$ flowing though them then&#xA;$V_1 = V_{in} \frac{R_1}{R_1+R_2}$, $V_2 = V_{in} \frac{R_2}{R_1+R_2}$.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/voltage-source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/voltage-source/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;electronic%20circuit&#34;&gt;electronic circuit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;voltage-source&#34;&gt;Voltage Source&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../attachments/Pasted%20image%2020221026205842.png&#34; alt=&#34;Pasted image 20221026205842&#34;&gt;&#xA;And here $u=e$&#xA;Here $e[V]$ is called electromotive force.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/weighted-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/weighted-graph/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;Graph.md&#34;&gt;Graph&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Edges of the graphs contain a certain weight to represent an arbitrary value such as cost, distance, quantity etc.&#xA;This relation can be related with triplet (u,v,w)&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/why-derivative-of-lnx-equals-1-over-x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/why-derivative-of-lnx-equals-1-over-x/</guid>
      <description>&lt;p&gt;Steps to get a derivative of $ln(x)$:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;write it as $y = ln(x)$&lt;/li&gt;&#xA;&lt;li&gt;rewrite it as $e^y = x$ (using definition of a $log$)&lt;/li&gt;&#xA;&lt;li&gt;using &lt;a href=&#34;Implicit%20differentiation.md&#34;&gt;Implicit differentiation&lt;/a&gt; property write $e^y\cdot dy = dx$&lt;/li&gt;&#xA;&lt;li&gt;rearrange the terms and get $\frac{dy}{dx} = \frac{1}{e^y}$&lt;/li&gt;&#xA;&lt;li&gt;and since $e^y = x \rightarrow \frac{dy}{dx} = \frac{1}{x}$&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/worst-case-analysis-in-cryptography/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/worst-case-analysis-in-cryptography/</guid>
      <description>&lt;h1 id=&#34;worst-case-analysis-in-cryptography&#34;&gt;Worst case analysis in Cryptography&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;Cryptography&#34;&gt;Cryptography&lt;/a&gt; we often analyse what happens and how secure the system is if the attacker has more and more information. This is divided into levels of knowledge (WC short for Worst Case):&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;WC1: attacker knows the entire &lt;a href=&#34;Encryption%20System&#34;&gt;Encryption System&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;WC2: attacker has &lt;a href=&#34;Ciphertext.md&#34;&gt;Ciphertext&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;WC3: attacker has &lt;a href=&#34;Plain%20text.md&#34;&gt;Plain text&lt;/a&gt; match for the &lt;a href=&#34;Ciphertext.md&#34;&gt;Ciphertext&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost/xor-gate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/xor-gate/</guid>
      <description>&lt;h1 id=&#34;xor-gate---&#34;&gt;XOR gate ( ^ )&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Logic%20Gates.md&#34;&gt;Logic Gates&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;truth-table&#34;&gt;Truth Table&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;Truth%20Tables.md&#34;&gt;Truth Tables&lt;/a&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;P&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Q&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Can be represented as: $\lnot (p \Leftrightarrow q)$&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;symbol-representation&#34;&gt;Symbol Representation&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;XOR_GATE.png%20&#34; alt=&#34; 400x200&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apply pattern</title>
      <link>http://localhost/apply-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost/apply-pattern/</guid>
      <description>&lt;h1 id=&#34;apply-pattern&#34;&gt;Apply pattern&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!Definition]&#xA;Pattern that spreads the arguments from a list into separate arguments of a function. Part of a &lt;a href=&#34;Function%20programming&#34;&gt;Function programming&lt;/a&gt; theory.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;applyFn&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;argsArr&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;( ...&lt;span style=&#34;color:#a6e22e&#34;&gt;argsArr&lt;/span&gt; );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;Sometimes we have functions that we cannot alter but need to use in drastically different form:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// error&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Error is caused by to few arguments, &lt;code&gt;arr&lt;/code&gt; is passed as &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is empty.&#xA;Probably, we wanted &lt;code&gt;x&lt;/code&gt; to be 3 and &lt;code&gt;y&lt;/code&gt; to be 9. Therefore we program:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
